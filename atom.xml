<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Ginger</title>
  
  <subtitle>一个前端er~</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-01-02T11:43:29.450Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Ginger</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>js基本语法</title>
    <link href="http://yoursite.com/2020/01/02/js%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/"/>
    <id>http://yoursite.com/2020/01/02/js%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/</id>
    <published>2020-01-02T11:43:17.000Z</published>
    <updated>2020-01-02T11:43:29.450Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">知识点:</span><br><span class="line">  - 变量</span><br><span class="line">  - 注释</span><br><span class="line">  - 数据类型</span><br><span class="line">  - 运算符</span><br></pre></td></tr></table></figure><h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><blockquote><p>变量—区分大小写</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 变量的作用: 用来操作数据的(可以存储,可以读取)</span></span><br><span class="line"><span class="keyword">var</span> admin <span class="comment">// 变量的声明-&gt;只声明,没有赋值</span></span><br><span class="line"><span class="keyword">var</span> name = <span class="string">'周杰伦'</span> <span class="comment">// 变量的初始化-&gt;声明并赋值</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 1.使用var关键字(variable:可变的量)</span></span><br><span class="line"><span class="keyword">var</span> uname <span class="comment">// undefined</span></span><br><span class="line">uname = <span class="string">'周杰伦'</span> <span class="comment">//赋值</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.声明变量即赋值(推荐)</span></span><br><span class="line"><span class="keyword">var</span> unam = <span class="string">'周杰伦'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 3.声明多个变量</span></span><br><span class="line"><span class="keyword">var</span> unam = <span class="string">'周杰伦'</span>,</span><br><span class="line">  age = <span class="number">20</span></span><br></pre></td></tr></table></figure><blockquote><p>变量名的注意问题—变量名的命名规范,要遵循驼峰命名法</p></blockquote><pre><code>* 1.变量的名字要有意义,* 2.变量名有一定的规范:一般以字母,$符号,下划线开头,中间或者后面可以有$符号,字母,数字* 3.变量名一般都是小写的* 4.变量名如果是多个单词,第一个单词的首字母是小写的,后面的所有的单词的首字母都是大写的,这种命名方式称为:驼峰命名法* 5.不能使用关键字(系统自带的一些单词,不能使用)* 6.不会单词用拼音,拼音也要遵循驼峰命名法</code></pre><h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//注释是解释代码的含义,浏览器不会对注释内容进行解析执行</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 单行注释</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 多行注释</span></span><br><span class="line"><span class="comment"> * 建议在代码关键处添加注释</span></span><br><span class="line"><span class="comment"> * 不写注释--&gt;写的时候只有你和上帝看的懂,写完之后你的代码只有上帝看得懂</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 另外一种多行注释</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 原始数据类型(6种)</span></span><br><span class="line"><span class="keyword">var</span> num = <span class="number">10</span> <span class="comment">//number 数字类型(整数和小数)</span></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">'周杰伦'</span> <span class="comment">//string 字符串类型(一般用单引号或双引号包裹)</span></span><br><span class="line"><span class="keyword">var</span> flag = <span class="literal">true</span> <span class="comment">//boolean 布尔类型(值只有两个 true(真/1) false(假/0))</span></span><br><span class="line"><span class="keyword">var</span> nll = <span class="literal">null</span> <span class="comment">//null 空类型 值只有一个null 一个对象指向为空,可以赋值为null</span></span><br><span class="line"><span class="keyword">var</span> undef <span class="comment">//undefined 未定义值只有一个undefined(变量声明了,没有赋值 函数没有返回值)</span></span><br><span class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> <span class="built_in">Object</span>() <span class="comment">//object 对象</span></span><br><span class="line"></span><br><span class="line"><span class="literal">NaN</span> <span class="comment">// 特殊(not an number) undefined加数字会出现NaN</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取数据类型</span></span><br><span class="line"><span class="keyword">typeof</span> num <span class="comment">// number</span></span><br><span class="line"><span class="keyword">typeof</span> num <span class="comment">// number</span></span><br></pre></td></tr></table></figure><p>###　类型转行</p><blockquote><p>其他类型转数字类型</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 转整数</span></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="string">'10'</span>) <span class="comment">// 10 转整数</span></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="string">'12abc'</span>) <span class="comment">// 12</span></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="string">'1a1'</span>) <span class="comment">// 1 遇到非数字就停止</span></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="string">'abc12'</span>) <span class="comment">// NaN</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 转数字</span></span><br><span class="line"><span class="built_in">Number</span>(<span class="string">'10'</span>) <span class="comment">// 10</span></span><br><span class="line"><span class="built_in">Number</span>(<span class="string">'12abc'</span>) <span class="comment">// NaN</span></span><br><span class="line"><span class="built_in">Number</span>(<span class="string">'1.1'</span>) <span class="comment">// 1.1</span></span><br><span class="line"><span class="built_in">Number</span>(<span class="string">'abc12'</span>) <span class="comment">// NaN</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 转小数</span></span><br><span class="line"><span class="built_in">parseFloat</span>(<span class="string">'12'</span>) <span class="comment">// 10</span></span><br><span class="line"><span class="built_in">parseFloat</span>(<span class="string">'12.12'</span>) <span class="comment">// 12.12</span></span><br><span class="line"><span class="built_in">parseFloat</span>(<span class="string">'abc12'</span>) <span class="comment">// NaN</span></span><br></pre></td></tr></table></figure><blockquote><p>其他类型转字符串</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 如果变量有意义调用.tostring（）使用转换  // undefined(无意义)</span></span><br><span class="line"><span class="comment">// 如果变量没有意义使用string（）转换</span></span><br><span class="line"><span class="keyword">var</span> num = <span class="number">20</span></span><br><span class="line">num.toString() <span class="comment">// '20'</span></span><br><span class="line"><span class="built_in">String</span>(num) <span class="comment">// '20'</span></span><br></pre></td></tr></table></figure><blockquote><p>其他类型转布尔类型</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// console.log(Boolean(1)) //true</span></span><br><span class="line"><span class="comment">// console.log(Boolean(0)) //false</span></span><br><span class="line"><span class="comment">// console.log(Boolean(11)) //true</span></span><br><span class="line"><span class="comment">// console.log(Boolean(-10)) //true</span></span><br><span class="line"><span class="comment">// console.log(Boolean("哈哈")) //true</span></span><br><span class="line"><span class="comment">// console.log(Boolean("")) //false</span></span><br><span class="line"><span class="comment">// console.log(Boolean(null)) //false</span></span><br><span class="line"><span class="comment">// console.log(Boolean(undefined)) //false</span></span><br></pre></td></tr></table></figure><h3 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 算数运算符:  +  -  *  /  %</span></span><br><span class="line"><span class="comment">// 算数运算表达式:由算数运算符连接起来的表达式</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 一元运算符: 这个操作符只需要一个操作数就可以运算的符号  ++  --</span></span><br><span class="line"><span class="comment">// 二元运算符: 这个操作符需要两个操作数就可以运算,</span></span><br><span class="line"><span class="comment">// 三元运算符: 10 == 10 ? true:false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 复合运算符: +=  -=  *=  /=  %=</span></span><br><span class="line"><span class="comment">// 复合运算表达式:由复合运算符连接起来的表达式</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 关系运算符: &gt;  &lt;  &gt;=  &lt;=  ==不严格的 ===严格的 !=不严格的不等 !==严格的不等</span></span><br><span class="line"><span class="comment">// 关系运算表达式:由关系运算符连接起来的表达式</span></span><br><span class="line"><span class="comment">// 关系运算表达式的结果是布尔类型</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 逻辑运算符:</span></span><br><span class="line"><span class="comment">// &amp;&amp;---逻辑与--并且</span></span><br><span class="line"><span class="comment">// ||---逻辑或---或者</span></span><br><span class="line"><span class="comment">// !---逻辑非---取反--取非</span></span><br><span class="line"><span class="comment">// 逻辑运算表达式:由逻辑运算符连接起来的表达式</span></span><br><span class="line"><span class="comment">// 表达式1 &amp;&amp; 表达式2</span></span><br><span class="line"><span class="comment">// 如果有一个为false,整个的结果就是false</span></span><br><span class="line"><span class="comment">// 表达式1 || 表达式2</span></span><br><span class="line"><span class="comment">// 如果有一个为true,整个的结果为true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// !表达式1 取反</span></span><br><span class="line"><span class="comment">// 表达式1的结果是true,整个结果为false</span></span><br><span class="line"><span class="comment">// 表达式1的结果是false,整个结果为true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 赋值运算符:  =</span></span><br><span class="line"><span class="keyword">var</span> num = <span class="number">12</span></span><br></pre></td></tr></table></figure><h3 id="一元运算符"><a href="#一元运算符" class="headerlink" title="一元运算符"></a>一元运算符</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 基础  ++与--</span></span><br><span class="line"><span class="keyword">var</span> num = <span class="number">10</span></span><br><span class="line">num++ <span class="comment">// 相当于num = num + 1 输出 11</span></span><br><span class="line">num-- <span class="comment">// 相当于num = num - 1 输出 9</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 进阶</span></span><br><span class="line"><span class="keyword">var</span> num = <span class="number">10</span></span><br><span class="line"><span class="keyword">var</span> sum = num++ + <span class="number">10</span> <span class="comment">// sum = 20</span></span><br><span class="line"><span class="comment">// 如果++在后面：如上： num++ + 10参与运算</span></span><br><span class="line"><span class="comment">// 先运算 再加加</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> sum1 = ++num + <span class="number">10</span> <span class="comment">// sum1 = 21</span></span><br><span class="line"><span class="comment">// 如果++在前面 如上： ++num + 10</span></span><br><span class="line"><span class="comment">// 先加加 再运算加10</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class
      
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript简介</title>
    <link href="http://yoursite.com/2019/12/31/js%E7%AE%80%E4%BB%8B/"/>
    <id>http://yoursite.com/2019/12/31/js%E7%AE%80%E4%BB%8B/</id>
    <published>2019-12-31T08:01:47.000Z</published>
    <updated>2019-12-31T08:02:33.781Z</updated>
    
    <content type="html"><![CDATA[<h4 id="JavaScript-–-gt-简称-js"><a href="#JavaScript-–-gt-简称-js" class="headerlink" title="JavaScript –&gt; 简称 js"></a>JavaScript –&gt; 简称 js</h4><blockquote><p>JavaScript 历史</p></blockquote><p>​ 1995 年，网景公司希望能在静态 HTML 页面上添加一些动态效果, 让 Brendan Eich 设计出了 JavaScript 语言(用时 2 周)</p><blockquote><p>JavaScript 分为三个部分:</p></blockquote><ul><li>ECMAScript 标准—-js 的基本语法</li><li>DOM—Document Object Model 文档对象模型</li><li>BOM—Browser Object Model 浏览器对象模型</li></ul><blockquote><p>JavaScript 是什么?</p></blockquote><ul><li>是一门脚本语言</li><li>是一门解释性语言</li><li>是一门弱类型的语言</li><li>是一门动态类型的语言</li><li>是一门基于对象的语言</li></ul><blockquote><p>JavaScript 代码写在哪里</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">第一种:写在html文件中--&gt;使用script标签包裹代码</span><br><span class="line">&lt;script&gt;</span><br><span class="line">alert(<span class="string">'这对script标签中的就是js代码)</span></span><br><span class="line"><span class="string">&lt;/script&gt;</span></span><br><span class="line"><span class="string">第二种:可以单独写在js文件中--&gt;js文件中不需要使用&lt;script&gt;标签</span></span><br></pre></td></tr></table></figure><blockquote><script>标签的属性:</blockquote><ul><li>src 表示要引入的外部文件</li><li>type 表示脚本语言的类型 text/javascript,默认值就是它.</li><li>language 已废弃。原来用于代码使用的脚本语言。由于大多数浏览器忽略它，所以不要用了。</li><li>defer：可选。(等页面加载完成后,才执行 js)表示脚本可以延迟到文档完全被解析和显示之后再执行。由于大多数浏览器不支持，故很少用。</li><li>charset：可选。表示通过 src 属性指定的字符集。由于大多数浏览器忽略它，所以很少有人用它。</li><li>async:可选,能简单实现 js 的异步加载.</li></ul><blockquote><p>注意事项</p></blockquote><ul><li><script>标签尽量放在<body>标签内,放在结束的</body>标签前- 一个<script>标签如果用于引入外部 js 文件,就不要在标签内写 script 代码</li><li>html 文件中可以同时存在多对<script>标签,浏览器会依次解析执行</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;JavaScript-–-gt-简称-js&quot;&gt;&lt;a href=&quot;#JavaScript-–-gt-简称-js&quot; class=&quot;headerlink&quot; title=&quot;JavaScript –&amp;gt; 简称 js&quot;&gt;&lt;/a&gt;JavaScript –&amp;gt; 简称 js
      
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>实现一个简单的 Form 表单组件</title>
    <link href="http://yoursite.com/2019/12/30/myForm/"/>
    <id>http://yoursite.com/2019/12/30/myForm/</id>
    <published>2019-12-30T06:26:20.000Z</published>
    <updated>2019-12-30T07:10:21.460Z</updated>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;本文主要通过实现一个简单的 Form 组件来学习 Vue 中相关知识点.</p><h3 id="相关知识点"><a href="#相关知识点" class="headerlink" title="相关知识点"></a>相关知识点</h3><ul><li>v-model 指令的实质</li><li>父子组件定义属性传值 props $emit</li><li>子孙组件传值 provide inject</li><li>slot 插槽</li><li>在生命周期中监听自定义事件</li></ul><h3 id="需求分析"><a href="#需求分析" class="headerlink" title="需求分析"></a>需求分析</h3><ul><li>数据双向绑定</li><li>单个规则校验</li><li>label</li><li>error 错误提示</li><li>数据获取</li><li>数据传递</li><li>全局校验</li></ul><h3 id="组件拆分-单一性"><a href="#组件拆分-单一性" class="headerlink" title="组件拆分(单一性)"></a>组件拆分(单一性)</h3><ul><li>Input 组件</li><li>FormItem 组件</li><li>Form 组件</li></ul><h3 id="组件功能划分"><a href="#组件功能划分" class="headerlink" title="组件功能划分"></a>组件功能划分</h3><hr><blockquote><p>Input 组件</p></blockquote><p>数据双向绑定<br>触发规则校验</p><hr><blockquote><p>FormItme 组件</p></blockquote><p>label<br>prop<br>error</p><hr><blockquote><p>Form 组件</p></blockquote><p>数据模型持有<br>校验规则持有<br>数据传递<br>全局校验</p><hr><h3 id="功能实现"><a href="#功能实现" class="headerlink" title="功能实现"></a>功能实现</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Input 组件</span></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;input type=<span class="string">"text"</span> :value=<span class="string">"value"</span> @input=<span class="string">"onInput"</span> /&gt;</span><br><span class="line">  &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 职能</span></span><br><span class="line"><span class="comment"> * 1.双向绑定</span></span><br><span class="line"><span class="comment"> * 2.触发校验</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  name: <span class="string">'KInput'</span>,</span><br><span class="line">  props: &#123;</span><br><span class="line">    value: &#123;</span><br><span class="line">      type: <span class="built_in">String</span>,</span><br><span class="line">      <span class="keyword">default</span>: <span class="string">''</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    onInput(e) &#123;</span><br><span class="line">      <span class="comment">// v-model 监听 input</span></span><br><span class="line">      <span class="keyword">this</span>.$emit(<span class="string">'input'</span>, e.target.value)</span><br><span class="line">      <span class="comment">// 触发校验</span></span><br><span class="line">      <span class="keyword">this</span>.$parent.$emit(<span class="string">'validate'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// FormItem 组件</span></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;label v-<span class="keyword">if</span>=<span class="string">"label"</span>&gt;&#123;&#123; label &#125;&#125;&lt;<span class="regexp">/label&gt;</span></span><br><span class="line"><span class="regexp">    &lt;slot /</span>&gt;</span><br><span class="line">    &lt;span v-show=<span class="string">"error"</span>&gt;&#123;&#123; error &#125;&#125;&lt;<span class="regexp">/span&gt;</span></span><br><span class="line"><span class="regexp">  &lt;/</span>div&gt;</span><br><span class="line">&lt;<span class="regexp">/template&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;script&gt;</span></span><br><span class="line"><span class="regexp">/</span>**</span><br><span class="line"> * 职能</span><br><span class="line"> * <span class="number">1.</span>校验</span><br><span class="line"> * <span class="number">2.</span>label</span><br><span class="line"> * <span class="number">3.</span>error</span><br><span class="line"> *<span class="regexp">/</span></span><br><span class="line"><span class="regexp">import Schema from 'async-validator'</span></span><br><span class="line"><span class="regexp">export default &#123;</span></span><br><span class="line"><span class="regexp">  inject: ['form'],</span></span><br><span class="line"><span class="regexp">  props: &#123;</span></span><br><span class="line"><span class="regexp">    label: &#123;</span></span><br><span class="line"><span class="regexp">      type: String,</span></span><br><span class="line"><span class="regexp">      default: ''</span></span><br><span class="line"><span class="regexp">    &#125;,</span></span><br><span class="line"><span class="regexp">    prop: &#123;</span></span><br><span class="line"><span class="regexp">      type: String,</span></span><br><span class="line"><span class="regexp">      default: ''</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">  &#125;,</span></span><br><span class="line"><span class="regexp">  data() &#123;</span></span><br><span class="line"><span class="regexp">    return &#123;</span></span><br><span class="line"><span class="regexp">      error: ''</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">  &#125;,</span></span><br><span class="line"><span class="regexp">  mounted() &#123;</span></span><br><span class="line"><span class="regexp">    this.$on('validate', () =&gt; &#123;</span></span><br><span class="line"><span class="regexp">      this.validate()</span></span><br><span class="line"><span class="regexp">    &#125;)</span></span><br><span class="line"><span class="regexp">  &#125;,</span></span><br><span class="line"><span class="regexp">  methods: &#123;</span></span><br><span class="line"><span class="regexp">    validate() &#123;</span></span><br><span class="line"><span class="regexp">      /</span>**</span><br><span class="line">       * 引入 sync-validate 插件</span><br><span class="line">       * 获取校验规则与校验值</span><br><span class="line">       *<span class="regexp">/</span></span><br><span class="line"><span class="regexp">      const value = this.form.model[this.prop]</span></span><br><span class="line"><span class="regexp">      const rule = this.form.rules[this.prop]</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">      const schema = new Schema(&#123; [this.prop]: rule &#125;)</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">      return schema.validate(</span></span><br><span class="line"><span class="regexp">        &#123; [this.prop]: value.trim() &#125;,</span></span><br><span class="line"><span class="regexp">        errors =&gt; (this.error = errors ? errors[0].message : '')</span></span><br><span class="line"><span class="regexp">      )</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp">&lt;/</span>script&gt;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Form 组件</span></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;slot /&gt;</span><br><span class="line">  &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 职能</span></span><br><span class="line"><span class="comment"> * 1.数据持有丶传递</span></span><br><span class="line"><span class="comment"> * 2.全局校验</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  props: &#123;</span><br><span class="line">    model: &#123;</span><br><span class="line">      type: <span class="built_in">Object</span></span><br><span class="line">    &#125;,</span><br><span class="line">    rules: &#123;</span><br><span class="line">      type: <span class="built_in">Object</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  provide() &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      form: <span class="keyword">this</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    validate(cb) &#123;</span><br><span class="line">      <span class="comment">/**</span></span><br><span class="line"><span class="comment">       * 全局校验</span></span><br><span class="line"><span class="comment">       * 获取所有子组件</span></span><br><span class="line"><span class="comment">       * 找到带有prop验证的</span></span><br><span class="line"><span class="comment">       * 调用子组件自身的校验方法</span></span><br><span class="line"><span class="comment">       */</span></span><br><span class="line">      <span class="keyword">const</span> tasks = <span class="keyword">this</span>.$children</span><br><span class="line">        .filter(<span class="function"><span class="params">item</span> =&gt;</span> item.prop)</span><br><span class="line">        .map(<span class="function"><span class="params">item</span> =&gt;</span> item.validate())</span><br><span class="line"></span><br><span class="line">      <span class="built_in">Promise</span>.all(tasks)</span><br><span class="line">        .then(<span class="function"><span class="params">()</span> =&gt;</span> cb(<span class="literal">true</span>))</span><br><span class="line">        .catch(<span class="function"><span class="params">()</span> =&gt;</span> cb(<span class="literal">false</span>))</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 测试</span></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;KFrom ref=<span class="string">"form"</span> :model=<span class="string">"model"</span> :rules=<span class="string">"rules"</span>&gt;</span><br><span class="line">      &lt;KFormitem lable=<span class="string">"用户名"</span> prop=<span class="string">"uname"</span>&gt;</span><br><span class="line">        &lt;KInput v-model=<span class="string">"model.uname"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">KInput</span>&gt;</span></span></span><br><span class="line">      &lt;<span class="regexp">/KFormitem&gt;</span></span><br><span class="line"><span class="regexp">      &lt;KFormitem lable="密码" prop="pwd"&gt;</span></span><br><span class="line"><span class="regexp">        &lt;KInput v-model="model.pwd"&gt;&lt;/</span>KInput&gt;</span><br><span class="line">      &lt;<span class="regexp">/KFormitem&gt;</span></span><br><span class="line"><span class="regexp">      &lt;KFormitem&gt;</span></span><br><span class="line"><span class="regexp">        &lt;button @click="submit"&gt;校验&lt;/</span>button&gt;</span><br><span class="line">      &lt;<span class="regexp">/KFormitem&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>KFrom&gt;</span><br><span class="line">  &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">import</span> KFrom <span class="keyword">from</span> <span class="string">'./KForm'</span></span><br><span class="line"><span class="keyword">import</span> KFormitem <span class="keyword">from</span> <span class="string">'./KFormitem'</span></span><br><span class="line"><span class="keyword">import</span> KInput <span class="keyword">from</span> <span class="string">'./KInput'</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  components: &#123; KFrom, KFormitem, KInput &#125;,</span><br><span class="line">  data() &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      model: &#123;</span><br><span class="line">        uname: <span class="string">''</span>,</span><br><span class="line">        pwd: <span class="string">''</span></span><br><span class="line">      &#125;,</span><br><span class="line">      rules: &#123;</span><br><span class="line">        uname: [&#123; <span class="attr">required</span>: <span class="literal">true</span>, <span class="attr">message</span>: <span class="string">'用户名不能为空'</span> &#125;],</span><br><span class="line">        pwd: [&#123; <span class="attr">required</span>: <span class="literal">true</span>, <span class="attr">message</span>: <span class="string">'密码不能为空'</span> &#125;]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    submit() &#123;</span><br><span class="line">      <span class="keyword">this</span>.$refs.form.validate(<span class="function"><span class="params">isValidate</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (isValidate) &#123;</span><br><span class="line">          alert(<span class="string">'校验通过'</span>)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          alert(<span class="string">'校验失败'</span>)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&amp;emsp;&amp;emsp;本文主要通过实现一个简单的 Form 组件来学习 Vue 中相关知识点.&lt;/p&gt;
&lt;h3 id=&quot;相关知识点&quot;&gt;&lt;a href=&quot;#相关知识点&quot; class=&quot;headerlink&quot; title=&quot;相关知识点&quot;&gt;&lt;/a&gt;相关知识点&lt;/h3&gt;&lt;ul&gt;

      
    
    </summary>
    
    
      <category term="Vue" scheme="http://yoursite.com/categories/Vue/"/>
    
    
      <category term="Vue" scheme="http://yoursite.com/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>Hexo + Next + GitHub 搭建博客</title>
    <link href="http://yoursite.com/2019/12/26/hello-blog/"/>
    <id>http://yoursite.com/2019/12/26/hello-blog/</id>
    <published>2019-12-26T12:32:11.404Z</published>
    <updated>2019-12-27T11:13:56.676Z</updated>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;秃头一族怎么能没有自己的 Blog 呢? 本想着自己买服务器与域名,使用 Node React 纯手撸 ,奈何钱包与时间它不允许, 所以就有了本站与这篇文章了.</p><blockquote><p>相关链接</p></blockquote><p><a href="https://hexo.io/" target="_blank" rel="noopener">Hexo 文档</a><br><a href="https://theme-next.iissnan.com/" target="_blank" rel="noopener">NexT 文档</a><br><a href="https://cuiqingcai.com/7625.html" target="_blank" rel="noopener">参考大神博客</a></p><blockquote><p>一.全局安装 Hexo</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure><blockquote><p>二.创建博客项目</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用终端进入准备存放博客项目的目录 输入以下命令</span></span><br><span class="line">hexo init hexo-blog <span class="comment"># hexo-blog 自己取名即可</span></span><br><span class="line"><span class="built_in">cd</span> hexo-blog</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure><blockquote><p>三.本地预览博客</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo server <span class="comment"># 使用浏览器开大 http://localhost:4000 即可</span></span><br></pre></td></tr></table></figure><blockquote><p>四.打包部署</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo d -g</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&amp;emsp;&amp;emsp;秃头一族怎么能没有自己的 Blog 呢? 本想着自己买服务器与域名,使用 Node React 纯手撸 ,奈何钱包与时间它不允许, 所以就有了本站与这篇文章了.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;相关链接&lt;/p&gt;
&lt;/blockquote&gt;
&lt;
      
    
    </summary>
    
    
      <category term="Hexo" scheme="http://yoursite.com/categories/Hexo/"/>
    
    
      <category term="Blog" scheme="http://yoursite.com/tags/Blog/"/>
    
      <category term="Hexo" scheme="http://yoursite.com/tags/Hexo/"/>
    
      <category term="GitHub" scheme="http://yoursite.com/tags/GitHub/"/>
    
  </entry>
  
  <entry>
    <title>HTML meta标签详解</title>
    <link href="http://yoursite.com/2019/12/26/meta%E8%AF%A6%E8%A7%A3/"/>
    <id>http://yoursite.com/2019/12/26/meta%E8%AF%A6%E8%A7%A3/</id>
    <published>2019-12-26T11:59:08.145Z</published>
    <updated>2019-12-28T07:37:58.241Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;  H5标准声明，使用 HTML5 doctype，不区分大小写</span><br><span class="line">&lt;head lang=”en”&gt; 标准的 lang 属性写法</span><br><span class="line">&lt;meta charset=’utf<span class="number">-8</span>′&gt;    声明文档使用的字符编码</span><br><span class="line">&lt;meta http-equiv=”X-UA-Compatible” content=”IE=edge,chrome=<span class="number">1</span>″/&gt;   优先使用 IE 最新版本和 Chrome</span><br><span class="line">&lt;meta name=”description” content=”不超过<span class="number">150</span>个字符”/&gt;       页面描述</span><br><span class="line">&lt;meta name=”keywords” content=””/&gt;      页面关键词</span><br><span class="line">&lt;meta name=”author” content=”name, email@gmail.com”/&gt;    网页作者</span><br><span class="line">&lt;meta name=”robots” content=”index,follow”/&gt;      搜索引擎抓取</span><br><span class="line">&lt;meta name=”viewport” content=”initial-scale=<span class="number">1</span>, maximum-scale=<span class="number">3</span>, minimum-scale=<span class="number">1</span>, user-scalable=no”&gt; 为移动设备添加 viewport</span><br><span class="line">&lt;meta name=”apple-mobile-web-app-title” content=”标题”&gt; iOS 设备 begin</span><br><span class="line">&lt;meta name=”apple-mobile-web-app-capable” content=”yes”/&gt;  添加到主屏后的标题（iOS <span class="number">6</span> 新增）</span><br><span class="line">是否启用 WebApp 全屏模式，删除苹果默认的工具栏和菜单栏</span><br><span class="line">&lt;meta name=”apple-itunes-app” content=”app-id=myAppStoreID, affiliate-data=myAffiliateData, app-argument=myURL”&gt;</span><br><span class="line">添加智能 App 广告条 Smart App Banner（iOS <span class="number">6</span>+ Safari）</span><br><span class="line">&lt;meta name=”apple-mobile-web-app-status-bar-style” content=”black”/&gt;</span><br><span class="line">&lt;meta name=”format-detection” content=”telphone=no, email=no”/&gt;  设置苹果工具栏颜色</span><br><span class="line">&lt;meta name=”renderer” content=”webkit”&gt;  启用<span class="number">360</span>浏览器的极速模式(webkit)</span><br><span class="line">&lt;meta http-equiv=”X-UA-Compatible” content=”IE=edge”&gt;     避免IE使用兼容模式</span><br><span class="line">&lt;meta http-equiv=”Cache-Control” content=”no-siteapp” /&gt;    不让百度转码</span><br><span class="line">&lt;meta name=”HandheldFriendly” content=”<span class="literal">true</span>”&gt;     针对手持设备优化，主要是针对一些老的不识别viewport的浏览器，比如黑莓</span><br><span class="line">&lt;meta name=”MobileOptimized” content=”<span class="number">320</span>″&gt;   微软的老式浏览器</span><br><span class="line">&lt;meta name=”screen-orientation” content=”portrait”&gt;   uc强制竖屏</span><br><span class="line">&lt;meta name=”x5-orientation” content=”portrait”&gt;    QQ强制竖屏</span><br><span class="line">&lt;meta name=”full-screen” content=”yes”&gt;              UC强制全屏</span><br><span class="line">&lt;meta name=”x5-fullscreen” content=”<span class="literal">true</span>”&gt;       QQ强制全屏</span><br><span class="line">&lt;meta name=”browsermode” content=”application”&gt;   UC应用模式</span><br><span class="line">&lt;meta name=”x5-page-mode” content=”app”&gt;    QQ应用模式</span><br><span class="line">&lt;meta name=”msapplication-tap-highlight” content=”no”&gt;    windows phone 点击无高光</span><br><span class="line">设置页面不缓存</span><br><span class="line">&lt;meta http-equiv=”pragma” content=”no-cache”&gt;</span><br><span class="line">&lt;meta http-equiv=”cache-control” content=”no-cache”&gt;</span><br><span class="line">&lt;meta http-equiv=”expires” content=”<span class="number">0</span>″&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span 
      
    
    </summary>
    
    
      <category term="HTML" scheme="http://yoursite.com/categories/HTML/"/>
    
    
  </entry>
  
</feed>
