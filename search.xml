<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>vue组件深入-插槽</title>
    <url>/2020/02/06/vue%E7%BB%84%E4%BB%B6%E6%B7%B1%E5%85%A5-%E6%8F%92%E6%A7%BD/</url>
    <content><![CDATA[<h2 id="插槽"><a href="#插槽" class="headerlink" title="插槽"></a>插槽</h2><blockquote>
<p>在 2.6.0 中，具名插槽和作用域插槽引入了一个新的统一的语法 (即 v-slot 指令)。它取代了 slot 和 slot-scope 这两个目前已被废弃但未被移除且仍在文档中的 attribute。</p>
</blockquote>
<h2 id="插槽内容"><a href="#插槽内容" class="headerlink" title="插槽内容"></a>插槽内容</h2><p>Vue 实现了一套内容分发的 API, 它将 <code>&lt;slot&gt;</code> 元素作为承载分发内容的出口<br><code>&lt;slot&gt;&lt;/slot&gt;</code> 插槽内可以包含任何模板内容, 可以是文本、html、其他组件</p>
<blockquote>
<p>如果没有使用<code>&lt;slot&gt;</code>元素, 该组件起始标签和结束标签之间的任何内容都不会渲染</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 子组件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">my-component</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">slot</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">my-component</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 父组件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">my-parent</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">my-component</span>&gt;</span></span><br><span class="line">    这里的内容会替换到子组件中slot元素的位置</span><br><span class="line">  <span class="tag">&lt;/<span class="name">my-component</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">my-parent</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="编译作用域"><a href="#编译作用域" class="headerlink" title="编译作用域"></a>编译作用域</h2><p>如果想在一个插槽中使用数据, 该插槽跟模板其他地方一样可以访问相同的实例属性(相同的作用域)</p>
<blockquote>
<p>父级模板里的所有内容都是在父级作用域中编译的, 子模板里的所有内容都是在子作用域中编译的</p>
</blockquote>
<h2 id="默认值"><a href="#默认值" class="headerlink" title="默认值"></a>默认值</h2><p>我们在使用<code>&lt;slot&gt;</code>元素时, 可以放置一个默认内容, 当父组件中没有传入此项时, 该内容会被渲染, 当父组件有内容传入时, 传入内容替换掉默认内容, 被渲染出现</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 子组件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">my-child</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">slot</span>&gt;</span>默认内容<span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">my-child</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 父组件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">my-parent</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">my-child</span>&gt;</span></span><br><span class="line">    传入内容会替换掉默认内容</span><br><span class="line">  <span class="tag">&lt;/<span class="name">my-child</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">my-parent</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="具名插槽"><a href="#具名插槽" class="headerlink" title="具名插槽"></a>具名插槽</h2><blockquote>
<p>v-slot 只能添加在<code>&lt;template&gt;</code>上</p>
</blockquote>
<p>有时候, 我们需要用到多个插槽, Vue 为<code>&lt;slot&gt;</code>元素提供了一个特殊的 name 属性, 可以用这个属性为额外的插槽进行定义<br>一个不带 name 的<code>&lt;slot&gt;</code>出口会带有隐含的名字”default”</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 父组件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"hello"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">my-button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-slot:default</span>&gt;</span>默认 name 插槽<span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-slot:title</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h3</span>&gt;</span>H3<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-slot:main</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">main</span>&gt;</span>content<span class="tag">&lt;/<span class="name">main</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">my-button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">import</span> button <span class="keyword">from</span> <span class="string">'./button'</span></span></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="actionscript">    name: <span class="string">'HelloWorld'</span>,</span></span><br><span class="line"><span class="actionscript">    components: &#123; <span class="string">'my-button'</span>: button &#125;</span></span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 子组件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">slot</span>&gt;</span>默认名为 default 的插槽<span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">"title"</span>&gt;</span>默认内容<span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">"main"</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="作用域插槽"><a href="#作用域插槽" class="headerlink" title="作用域插槽"></a>作用域插槽</h2><p>有时候, 我们需要让插槽内容可以访问子组件中才有的数据<br>为了能在父级的插槽内访问到子组件的数据, 我们可以将数据作为<code>&lt;slot&gt;</code>元素的一个属性绑定上去</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">slot</span> <span class="attr">v-bind:user</span>=<span class="string">"user"</span>&gt;</span>&#123;&#123; user.lastName &#125;&#125;<span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>绑定在<code>&lt;slot&gt;</code>元素上的 attribute 被称为<strong>插槽 prop</strong>, 我们可以在父级作用域中, 使用带值的 <code>v-slot</code> 来定义我们提供的插槽 prop 名字</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">current-user</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-slot:default</span>=<span class="string">"slotProps"</span>&gt;</span></span><br><span class="line">    &#123;&#123; slotProps.user.lastName &#125;&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">current-user</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="独战默认插槽的缩写语法"><a href="#独战默认插槽的缩写语法" class="headerlink" title="独战默认插槽的缩写语法"></a>独战默认插槽的缩写语法</h2><blockquote>
<p>当出现多个插槽时, 需要始终为所有的插槽使用完整的基于<code>&lt;template&gt;</code>语法</p>
</blockquote>
<p>当被提供的内容只有默认插槽时, 我们可以不使用<code>&lt;template&gt;</code>元素, 而是将<code>v-slot</code>直接用在组件上</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">current-user</span> <span class="attr">v-slot:default</span>=<span class="string">"slotProps"</span>&gt;</span></span><br><span class="line">  &#123;&#123; slotProps.user.lastName &#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">current-user</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="解构插槽"><a href="#解构插槽" class="headerlink" title="解构插槽"></a>解构插槽</h2><p>作用域插槽的工作原理是将插槽内容包括在一个传入单个参数的函数里</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> (<span class="params">slotProps</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 插槽内容</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这意味着<code>v-slot</code>的值实际上可以是任何能够作为函数定义中的参数的 JavaScript 表达式. 所以我们可以通过解构的方式来传入具体的插槽 prop</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">current-user</span> <span class="attr">v-slot:default</span>=<span class="string">"&#123;user&#125;"</span>&gt;</span></span><br><span class="line">  &#123;&#123; user.lastName &#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">current-user</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>将插槽 prop 重命名</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">current-user</span> <span class="attr">v-slot:default</span>=<span class="string">"&#123;user: person&#125;"</span>&gt;</span></span><br><span class="line">  &#123;&#123; person.lastName &#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">current-user</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="动态插槽名"><a href="#动态插槽名" class="headerlink" title="动态插槽名"></a>动态插槽名</h2><p><strong>动态指令参数</strong>也可以用在<code>v-slot</code>上, 来定义动态的插槽名</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">base-layout</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-slot:</span>[<span class="attr">dynamicSlotName</span>]&gt;</span></span><br><span class="line">    ...</span><br><span class="line">  <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">base-layout</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="具名插槽的缩写"><a href="#具名插槽的缩写" class="headerlink" title="具名插槽的缩写"></a>具名插槽的缩写</h2><blockquote>
<p>如果要使用缩写, 必须始终以明确插槽名取代</p>
</blockquote>
<p>跟<code>v-on</code>和<code>v-bind</code>一样, <code>v-slot</code>也有缩写, 即把参数之前的所有内容(<code>v-slot:</code>)替换为字符<code>#</code></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">base-layout</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">template</span> #<span class="attr">header</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>缩写的具名插槽<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">template</span> #<span class="attr">default</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>缩写的默认插槽<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">base-layout</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="其他示例"><a href="#其他示例" class="headerlink" title="其他示例"></a>其他示例</h2><p>插槽 prop 允许我们将插槽转换为可复用的模板，这些模板可以基于输入的 prop 渲染出不同的内容<br>我们可以将每个 todo 作为父级组件的插槽，以此通过父级组件对其进行控制，然后将 todo 作为一个插槽 prop 进行绑定：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"todo in filteredTodos"</span> <span class="attr">v-bind:key</span>=<span class="string">"todo.id"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    我们为每个 todo 准备了一个插槽，</span></span><br><span class="line"><span class="comment">    将 `todo` 对象作为一个插槽的 prop 传入。</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">"todo"</span> <span class="attr">v-bind:todo</span>=<span class="string">"todo"</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 后备内容 --&gt;</span></span><br><span class="line">      &#123;&#123; todo.text &#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>现在当我们使用 <code>&lt;todo-list&gt;</code> 组件的时候，我们可以选择为 todo 定义一个不一样的 <code>&lt;template&gt;</code> 作为替代方案，并且可以从子组件获取数据：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">todo-list</span> <span class="attr">v-bind:todos</span>=<span class="string">"todos"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-slot:todo</span>=<span class="string">"&#123; todo &#125;"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-if</span>=<span class="string">"todo.isComplete"</span>&gt;</span>✓<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    &#123;&#123; todo.text &#125;&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">todo-list</span>&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>vue组件深入-自定义事件</title>
    <url>/2020/02/05/vue%E7%BB%84%E4%BB%B6%E6%B7%B1%E5%85%A5-%E8%87%AA%E5%AE%9A%E4%B9%89%E4%BA%8B%E4%BB%B6/</url>
    <content><![CDATA[<h2 id="事件名"><a href="#事件名" class="headerlink" title="事件名"></a>事件名</h2><p>事件名需要完全匹配监听这个事件所用的名称</p>
<blockquote>
<p>推荐使用短横线分隔法命名</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">this</span>.$emit(<span class="string">'myEvent'</span>)</span><br></pre></td></tr></table></figure>

<p>监听这个事件</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 无效的做法</span></span><br><span class="line">&lt;my-component v-on:my-event=<span class="string">"handleEmit"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">my-component</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<h2 id="自定义组件的-v-modle"><a href="#自定义组件的-v-modle" class="headerlink" title="自定义组件的 v-modle"></a>自定义组件的 <code>v-modle</code></h2><p>一个组件上的 <code>v-model</code> 默认会利用名为 <code>value</code> 的 prop 和名为 <code>input</code>的事件.<br>单选框、复选框等类型的输入控件可能会将 <code>value</code> attribute 用于不同的目的<br><code>model</code> 选项可以用来避免这样的冲突</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">Vue.component(<span class="string">'base-checkbox'</span>, &#123;</span><br><span class="line">  model: &#123;</span><br><span class="line">    prop: <span class="string">'checked'</span>,</span><br><span class="line">    event: <span class="string">'change'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  props: &#123;</span><br><span class="line">    checked: <span class="built_in">Boolean</span></span><br><span class="line">  &#125;,</span><br><span class="line">  template: <span class="string">`</span></span><br><span class="line"><span class="string">    &lt;input</span></span><br><span class="line"><span class="string">      type="checkbox"</span></span><br><span class="line"><span class="string">      v-bind:checked="checked"</span></span><br><span class="line"><span class="string">      v-on:change="$emit('change', $event.target.checked)"</span></span><br><span class="line"><span class="string">    &gt;</span></span><br><span class="line"><span class="string">  `</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h2 id="将原生事件绑定到组件"><a href="#将原生事件绑定到组件" class="headerlink" title="将原生事件绑定到组件"></a>将原生事件绑定到组件</h2><p>如果想要在一个组件的根元素上直接监听一个原生事件, 可以使用 <code>v-on</code> 的 <code>.native</code> 修饰符</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">base-inpur</span> <span class="attr">v-on.native</span>=<span class="string">"onFocus"</span>&gt;</span><span class="tag">&lt;/<span class="name">base-inpur</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>很多时候, 自定义组件中根元素并不是我们真正想要监听的元素, 如下:<br>这时候, 父级的 <code>.native</code> 监听器将静默失败, 他不会产生任何报错, 但是 <code>onFocus</code> 处理函数不会如预期被调用.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">label</span>&gt;</span></span><br><span class="line">  &#123;&#123; label &#125;&#125;</span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span></span></span><br><span class="line"><span class="tag">    <span class="attr">v-bind</span>=<span class="string">"$attrs"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">v-bind:value</span>=<span class="string">"value"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">v-on:input</span>=<span class="string">"$emit('input', $event.target.value)"</span></span></span><br><span class="line"><span class="tag">  /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>为了解决这个问题, Vue 提供了一个 <code>$listeners</code> 属性, 他是一个对象, 里面包含了作用在这个组件上的所有监听器</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  focus: <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;&#125;,</span><br><span class="line">  input: <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>有了这个 $listeners 属性，你就可以配合 v-on=”$listeners” 将所有的事件监听器指向这个组件的某个特定的子元素。对于类似 <code>&lt;input&gt;</code> 的你希望它也可以配合 v-model 工作的组件来说，为这些监听器创建一个类似下述 inputListeners 的计算属性通常是非常有用的：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">Vue.component(<span class="string">'base-input'</span>, &#123;</span><br><span class="line">  inheritAttrs: <span class="literal">false</span>,</span><br><span class="line">  props: [<span class="string">'label'</span>, <span class="string">'value'</span>],</span><br><span class="line">  computed: &#123;</span><br><span class="line">    inputListeners: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">var</span> vm = <span class="keyword">this</span></span><br><span class="line">      <span class="comment">// `Object.assign` 将所有的对象合并为一个新对象</span></span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">Object</span>.assign(</span><br><span class="line">        &#123;&#125;,</span><br><span class="line">        <span class="comment">// 我们从父级添加所有的监听器</span></span><br><span class="line">        <span class="keyword">this</span>.$listeners,</span><br><span class="line">        <span class="comment">// 然后我们添加自定义监听器，</span></span><br><span class="line">        <span class="comment">// 或覆写一些监听器的行为</span></span><br><span class="line">        &#123;</span><br><span class="line">          <span class="comment">// 这里确保组件配合 `v-model` 的工作</span></span><br><span class="line">          input: <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">            vm.$emit(<span class="string">'input'</span>, event.target.value)</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      )</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  template: <span class="string">`</span></span><br><span class="line"><span class="string">    &lt;label&gt;</span></span><br><span class="line"><span class="string">      &#123;&#123; label &#125;&#125;</span></span><br><span class="line"><span class="string">      &lt;input</span></span><br><span class="line"><span class="string">        v-bind="$attrs"</span></span><br><span class="line"><span class="string">        v-bind:value="value"</span></span><br><span class="line"><span class="string">        v-on="inputListeners"</span></span><br><span class="line"><span class="string">      &gt;</span></span><br><span class="line"><span class="string">    &lt;/label&gt;</span></span><br><span class="line"><span class="string">  `</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>现在 <code>&lt;base-input&gt;</code> 组件是一个完全透明的包裹器了，也就是说它可以完全像一个普通的 <code>&lt;input&gt;</code> 元素一样使用了：所有跟它相同的 attribute 和监听器的都可以工作。</p>
<h2 id="sync-修饰符"><a href="#sync-修饰符" class="headerlink" title=".sync 修饰符"></a>.sync 修饰符</h2><p>有些特殊情况下, 我们可能需要对一个 <code>prop</code> 进行”双向绑定”, 这样很容易带来维护上的问题</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">this</span>.$emit(<span class="string">'update:title'</span>, newTile)</span><br></pre></td></tr></table></figure>

<p>然后父组件可以监听那个事件并根据需要更新一个本地的数据属性</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">text-document</span></span></span><br><span class="line"><span class="tag">  <span class="attr">v-bind:title</span>=<span class="string">"doc.title"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">v-on:update:title</span>=<span class="string">"doc.title = $event"</span></span></span><br><span class="line"><span class="tag">&gt;</span><span class="tag">&lt;/<span class="name">text-document</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>Vue 为这种模式提供了一个缩写, 即 <code>.sync</code> 修饰符</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">text-document</span> <span class="attr">v-bind:title.sync</span>=<span class="string">"doc.title"</span>&gt;</span><span class="tag">&lt;/<span class="name">text-document</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意带有 .sync 修饰符的 v-bind 不能和表达式一起使用 (例如 v-bind:title.sync=”doc.title + ‘!’” 是无效的)。取而代之的是，你只能提供你想要绑定的属性名，类似 v-model。</p>
</blockquote>
<p>当我们用一个对象同时设置多个 prop 的时候，也可以将这个 .sync 修饰符和 v-bind 配合使用：</p>
<blockquote>
<p><code>&lt;text-document v-bind.sync=&quot;doc&quot;&gt;&lt;/text-document&gt;</code></p>
</blockquote>
<p>这样会把 doc 对象中的每一个属性 (如 title) 都作为一个独立的 prop 传进去，然后各自添加用于更新的 v-on 监听器。</p>
<blockquote>
<p>将 v-bind.sync 用在一个字面量的对象上，例如 v-bind.sync=”{ title: doc.title }”，是无法正常工作的，因为在解析一个像这样的复杂表达式的时候，有很多边缘情况需要考虑</p>
</blockquote>
]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>vue组件深入-Prop</title>
    <url>/2020/02/05/vue%E7%BB%84%E4%BB%B6%E6%B7%B1%E5%85%A5-Prop/</url>
    <content><![CDATA[<h2 id="Prop-的大小写"><a href="#Prop-的大小写" class="headerlink" title="Prop 的大小写"></a>Prop 的大小写</h2><p>在 HTML 元素的属性中对于大小写是不敏感的, 所以浏览器会将所有大写解释为小写字符, 意味着使用 DOM 模板时, 驼峰命名的 prop 名需要使用等价的短横线分隔命名</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">Vue.component(<span class="string">'componentsName'</span>, &#123;</span><br><span class="line">  <span class="comment">// 驼峰命名</span></span><br><span class="line">  props: [<span class="string">'docTitle'</span>],</span><br><span class="line">  template: <span class="string">'&lt;h1&gt;&#123;&#123; docTitle &#125;&#125;&lt;/h1&gt;'</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 在 html 中是短横线分隔的 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">component-name</span> <span class="attr">doc-title</span>=<span class="string">"hello"</span>&gt;</span><span class="tag">&lt;/<span class="name">component-name</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="Prop-类型"><a href="#Prop-类型" class="headerlink" title="Prop 类型"></a>Prop 类型</h2><p>props 可以是个数组</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">props: [<span class="string">'title'</span>, <span class="string">'name'</span>, <span class="string">'content'</span>, <span class="string">'gender'</span>]</span><br></pre></td></tr></table></figure>

<p>很多时候我们都希望每个 prop 都有指定的值类型, 我们可以用对象的形式列出 prop, 如果传入的 prop 类型与定义不符, Vue 会在控制台进行提示</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">props: &#123;</span><br><span class="line">  title: <span class="built_in">String</span>,</span><br><span class="line">  name: <span class="built_in">String</span>,</span><br><span class="line">  content: <span class="built_in">String</span>,</span><br><span class="line">  gender: <span class="built_in">Boolean</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="传递静态或动态-Prop"><a href="#传递静态或动态-Prop" class="headerlink" title="传递静态或动态 Prop"></a>传递静态或动态 Prop</h2><blockquote>
<p>我们可以将任意数据类型的值传递给 prop</p>
</blockquote>
<p>我们可以给 prop 传入一个静态值</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">my-component</span> <span class="attr">title</span>=<span class="string">"Ginger"</span>&gt;</span><span class="tag">&lt;/<span class="name">my-component</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>我们也可以通过<code>v-bind</code>对 prop 进行动态赋值</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> info = &#123;</span><br><span class="line">  title: <span class="string">'Ginger'</span></span><br><span class="line">&#125;</span><br><span class="line">&lt;my-component v-bind:title=<span class="string">"info.title"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">my-component</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<h2 id="单向数据流"><a href="#单向数据流" class="headerlink" title="单向数据流"></a>单向数据流</h2><p>所有的 prop 都使得父子组件的 prop 之间形成了一个<strong>单向下行绑定</strong><br>父级的 prop 的更新会向下流动到子组件中, 无法反过来<br>因为每次父组件发生更新时, 子组件中所有 prop 都将会刷新为最新的值, 所以不应该在一个子组件内改变 prop</p>
<ul>
<li>需要将 prop 作为子组件内部数据来使用</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">props: [<span class="string">'initialCounter'</span>],</span><br><span class="line">data: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    counter: <span class="keyword">this</span>.initialCounter</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>需要将传入的 prop 值进行转换</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">props:[<span class="string">'size'</span>],</span><br><span class="line"><span class="comment">// 使用一个计算属性来处理</span></span><br><span class="line">computed: &#123;</span><br><span class="line">  normalizedSize: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.size.trim().toLowerCase()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="prop-验证"><a href="#prop-验证" class="headerlink" title="prop 验证"></a>prop 验证</h2><p>我们可以为组件的 prop 指定验证要求, 如果不满足要求, Vue 会在控制台发出警告<br>为了定制 prop 的验证方式, 可以为 props 中的值提供一个验证需求的对象, 而不是一个字符串数组</p>
<blockquote>
<p>验证失败 Vue 会在控制台显示警告</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">Vue.component(<span class="string">'my-component'</span>, &#123;</span><br><span class="line">  props: &#123;</span><br><span class="line">    propA: <span class="built_in">Number</span>, <span class="comment">// 基础类型验证</span></span><br><span class="line">    propB: [<span class="built_in">String</span>, <span class="built_in">Number</span>], <span class="comment">// 可以是多个类型</span></span><br><span class="line">    propC: &#123;</span><br><span class="line">      <span class="comment">// 必须传入的字符串</span></span><br><span class="line">      type: <span class="built_in">String</span>,</span><br><span class="line">      <span class="built_in">require</span>: <span class="literal">true</span></span><br><span class="line">    &#125;,</span><br><span class="line">    propD: &#123;</span><br><span class="line">      <span class="comment">// 默认100的数字</span></span><br><span class="line">      type: <span class="built_in">Number</span>,</span><br><span class="line">      <span class="keyword">default</span>: <span class="number">100</span></span><br><span class="line">    &#125;,</span><br><span class="line">    propE: &#123;</span><br><span class="line">      <span class="comment">// 带有默认的对象</span></span><br><span class="line">      type: <span class="built_in">Object</span>,</span><br><span class="line">      <span class="keyword">default</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> &#123; <span class="attr">name</span>: <span class="string">'Ginger'</span> &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    propF: &#123;</span><br><span class="line">      <span class="comment">// 自定义验证函数</span></span><br><span class="line">      validator: <span class="function"><span class="keyword">function</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> [<span class="string">'success'</span>, <span class="string">'waring'</span>, <span class="string">'danger'</span>].indexOf(value) !== <span class="number">-1</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="类型检测"><a href="#类型检测" class="headerlink" title="类型检测"></a>类型检测</h3><p><code>type</code> 可以是下列原生构造函数中的一个:</p>
<ul>
<li><code>String</code></li>
<li><code>Number</code></li>
<li><code>Boolean</code></li>
<li><code>Array</code></li>
<li><code>Object</code></li>
<li><code>Date</code></li>
<li><code>Function</code></li>
<li><code>Symbol</code></li>
</ul>
<p>另外, <code>type</code> 也可以是一个自定义的构造函数, 并且通过 <code>instanceof</code> 来进行检查确认</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">firstName, lastName</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.firstName = firstName</span><br><span class="line">  <span class="keyword">this</span>.lastName = lastName</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用</span></span><br><span class="line">Vue.component(<span class="string">'my-component'</span>, &#123;</span><br><span class="line">  props: &#123;</span><br><span class="line">    author: Person</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="非-Prop-的-Attribute"><a href="#非-Prop-的-Attribute" class="headerlink" title="非 Prop 的 Attribute"></a>非 Prop 的 Attribute</h3><p>有些 attribute 通过自定义属性传向子组件, 但是在子组件内部并没有通过 props 接受, 这些 attribute 会被添加到这个组件的根元素上</p>
<h3 id="替换-合并已有的-attribute"><a href="#替换-合并已有的-attribute" class="headerlink" title="替换/合并已有的 attribute"></a>替换/合并已有的 attribute</h3><p>对于绝大多数 <code>attribute</code> 来说，从外部提供给组件的值会替换掉组件内部设置好的值。所以如果传入 <code>type=&quot;text</code> 就会替换掉 <code>type=&quot;date</code> <code>并把它破坏！庆幸的是，class</code> 和 <code>style</code> attribute 会稍微智能一些，即两边的值会被合并起来，从而得到最终的值：<code>form-control</code> <code>date-picker-theme-dark</code>。</p>
<h3 id="禁用-attribute-继承"><a href="#禁用-attribute-继承" class="headerlink" title="禁用 attribute 继承"></a>禁用 attribute 继承</h3><p>如果不希望组件的根元素继承 attribute, 可以在组件的选项中设置 <code>inheritAttrs: false</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">Vue.component(<span class="string">'my-component'</span>, &#123;</span><br><span class="line">  inheritAttrs: <span class="literal">false</span>,</span><br><span class="line">  ...</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h4 id="attrs-属性包含了传递给一个组件的-attribute-名和值"><a href="#attrs-属性包含了传递给一个组件的-attribute-名和值" class="headerlink" title="$attrs 属性包含了传递给一个组件的 attribute 名和值"></a>$attrs 属性包含了传递给一个组件的 attribute 名和值</h4><p>利用 <code>inheritAttrs: false</code> 和 <code>$attrs</code>，就可以手动决定这些 attribute 会被赋予哪个元素</p>
<blockquote>
<p>inheritAttrs: false 选项不会影响 style 和 class 的绑定。</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">Vue.component(<span class="string">'base-input'</span>, &#123;</span><br><span class="line">  inheritAttrs: <span class="literal">false</span>,</span><br><span class="line">  props: [<span class="string">'label'</span>, <span class="string">'value'</span>],</span><br><span class="line">  template: <span class="string">`</span></span><br><span class="line"><span class="string">    &lt;label&gt;</span></span><br><span class="line"><span class="string">      &#123;&#123; label &#125;&#125;</span></span><br><span class="line"><span class="string">      &lt;input</span></span><br><span class="line"><span class="string">        v-bind="$attrs"</span></span><br><span class="line"><span class="string">        v-bind:value="value"</span></span><br><span class="line"><span class="string">        v-on:input="$emit('input', $event.target.value)"</span></span><br><span class="line"><span class="string">      &gt;</span></span><br><span class="line"><span class="string">    &lt;/label&gt;</span></span><br><span class="line"><span class="string">  `</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>vue组件深入</title>
    <url>/2020/02/05/vue%E7%BB%84%E4%BB%B6%E6%B7%B1%E5%85%A5-%E7%BB%84%E4%BB%B6%E6%B3%A8%E5%86%8C/</url>
    <content><![CDATA[<h2 id="组件名"><a href="#组件名" class="headerlink" title="组件名"></a>组件名</h2><p>在注册一个组件的时候, 我们始终需要给它一个名字. 我们在使用<code>Vue.component</code>注册组件时, 第一个参数就是组件名</p>
<blockquote>
<p>Vue 推荐使用全小写字母且必须包含一个连字符</p>
</blockquote>
<h2 id="组件名大小写"><a href="#组件名大小写" class="headerlink" title="组件名大小写"></a>组件名大小写</h2><p>定义组件名的方式有两种:<br><strong>使用 kebab-case</strong><br>使用组件: <code>&lt;my-component-name&gt;</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">Vue.component(<span class="string">'my-component-name'</span>, &#123;&#125;)</span><br></pre></td></tr></table></figure>

<p><strong>使用 OascalCase</strong><br>使用组件</p>
<ul>
<li><code>&lt;my-component-name&gt;</code></li>
<li><code>&lt;MyComponentName&gt;</code></li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">Vue.component(<span class="string">'MyComponentName'</span>, &#123;&#125;)</span><br></pre></td></tr></table></figure>

<h2 id="全局注册"><a href="#全局注册" class="headerlink" title="全局注册"></a>全局注册</h2><p>当我们使用 <code>Vue.component()</code>来创建组件时, 这个组件时全局的, 我们可以在任何创建的 Vue 实例的模板中使用</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>JS Bin<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">my-component</span>&gt;</span><span class="tag">&lt;/<span class="name">my-component</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdnjs.cloudflare.com/ajax/libs/vue/2.0.3/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">      Vue.component(<span class="string">'my-component'</span>, &#123;</span></span><br><span class="line">        data() &#123;</span><br><span class="line"><span class="actionscript">          <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="actionscript">            text: <span class="string">'Ginger'</span></span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line"><span class="handlebars"><span class="xml">        template: '<span class="tag">&lt;<span class="name">div</span>&gt;</span></span><span class="template-variable">&#123;&#123; text &#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span>'</span></span></span><br><span class="line">      &#125;)</span><br><span class="line"><span class="actionscript">      <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123; el: <span class="string">'#app'</span> &#125;)</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="局部注册"><a href="#局部注册" class="headerlink" title="局部注册"></a>局部注册</h2><p>全局注册的组件即使在我们不使用的时候仍然会被包含在最终的构建结果中, 会造成用户下载的增加<br>我们可以通过一个普通 JavaScript 对象来定义组件, 然后在需要使用的 vue 实例中进行注册<br>对于 components 对象中的每个属性来说, 其属性名就是自定义元素的名字, 其属性值就是这个组件的选项对象</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>JS Bin<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">app-hellp</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdnjs.cloudflare.com/ajax/libs/vue/2.0.3/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">      <span class="keyword">var</span> hello = &#123;</span></span><br><span class="line"><span class="actionscript">        data: <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">          <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="actionscript">            msg: <span class="string">'Hi'</span></span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line"><span class="handlebars"><span class="xml">        template: '<span class="tag">&lt;<span class="name">h1</span>&gt;</span></span><span class="template-variable">&#123;&#123;msg&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">h1</span>&gt;</span>'</span></span></span><br><span class="line">      &#125;</span><br><span class="line"><span class="actionscript">      <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">        el: <span class="string">'#app'</span>,</span></span><br><span class="line">        components: &#123;</span><br><span class="line"><span class="actionscript">          <span class="string">'app-hellp'</span>: hello</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="在模块系统中局部注册"><a href="#在模块系统中局部注册" class="headerlink" title="在模块系统中局部注册"></a>在模块系统中局部注册</h2><p>我们也可以通过 <code>require</code> / <code>import</code> 使用一个模块系统.</p>
<h3 id="在模块系统中局部注册-1"><a href="#在模块系统中局部注册-1" class="headerlink" title="在模块系统中局部注册"></a>在模块系统中局部注册</h3><blockquote>
<p>推荐创建一个 <code>components</code> 目录, 将每个组件防止在其各自的文件中</p>
</blockquote>
<p>在模块系统中使用组件需要在局部注册之前, 我们需要导入每个想使用的组件</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 在使用前 先引入要使用的组件</span></span><br><span class="line"><span class="keyword">import</span> Home <span class="keyword">from</span> <span class="string">'./components/Home'</span></span><br><span class="line"><span class="keyword">import</span> Mine <span class="keyword">from</span> <span class="string">'./components/Mine'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  components: &#123;</span><br><span class="line">    Home,</span><br><span class="line">    Mine</span><br><span class="line">  &#125;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="基础组件的自动化全局注册"><a href="#基础组件的自动化全局注册" class="headerlink" title="基础组件的自动化全局注册"></a>基础组件的自动化全局注册</h3><p>当我们使用了 webpack 构建应用时, 可以使用 <code>require.context</code> 只全局注册通用的基础组件</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> upperFirst <span class="keyword">from</span> <span class="string">'lodash/upperFirst'</span></span><br><span class="line"><span class="keyword">import</span> camelCase <span class="keyword">from</span> <span class="string">'lodash/camelCase'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> requireComponent = <span class="built_in">require</span>.context(</span><br><span class="line">  <span class="comment">// 其组件目录的相对路径</span></span><br><span class="line">  <span class="string">'./components'</span>,</span><br><span class="line">  <span class="comment">// 是否查询其子目录</span></span><br><span class="line">  <span class="literal">false</span>,</span><br><span class="line">  <span class="comment">// 匹配基础组件文件名的正则表达式</span></span><br><span class="line">  /Base[A-Z]\w+\.(vue|js)$/</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">requireComponent.keys().forEach(<span class="function"><span class="params">fileName</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 获取组件配置</span></span><br><span class="line">  <span class="keyword">const</span> componentConfig = requireComponent(fileName)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 获取组件的 PascalCase 命名</span></span><br><span class="line">  <span class="keyword">const</span> componentName = upperFirst(</span><br><span class="line">    camelCase(</span><br><span class="line">      <span class="comment">// 获取和目录深度无关的文件名</span></span><br><span class="line">      fileName</span><br><span class="line">        .split(<span class="string">'/'</span>)</span><br><span class="line">        .pop()</span><br><span class="line">        .replace(<span class="regexp">/\.\w+$/</span>, <span class="string">''</span>)</span><br><span class="line">    )</span><br><span class="line">  )</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 全局注册组件</span></span><br><span class="line">  Vue.component(</span><br><span class="line">    componentName,</span><br><span class="line">    <span class="comment">// 如果这个组件选项是通过 `export default` 导出的，</span></span><br><span class="line">    <span class="comment">// 那么就会优先使用 `.default`，</span></span><br><span class="line">    <span class="comment">// 否则回退到使用模块的根。</span></span><br><span class="line">    componentConfig.default || componentConfig</span><br><span class="line">  )</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>全局注册必须在根 Vue 实例创建之前注册</p>
</blockquote>
]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>vue组件基础</title>
    <url>/2020/02/04/vue%E7%BB%84%E4%BB%B6%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<h2 id="基本示例"><a href="#基本示例" class="headerlink" title="基本示例"></a>基本示例</h2><p>组件是可复用的 Vue 实例, 且带有一个名字, 我们可以通过 new Vue 创建的 Vue 跟实例中, 把这个组件当做自定义元素来使用<br>组件与 new Vue 接受相同的选项</p>
<blockquote>
<p>组件的 <code>data</code> 必须是一个函数, 它返回一个对象的独立的拷贝<br>组件注册可分为 <strong>全局注册</strong>和<strong>局部注册</strong></p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">Vue.component(<span class="string">'hello-world'</span>, &#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      msg: <span class="string">'Hi! Vue'</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  template: <span class="string">'&lt;div&gt; &#123;&#123; msg &#125;&#125; &lt;/div&gt;'</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h2 id="组件的复用"><a href="#组件的复用" class="headerlink" title="组件的复用"></a>组件的复用</h2><p>组件可以进行任意次数的复用, 每个组件都会各自维护它的实例</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">hellp-world</span>&gt;</span><span class="tag">&lt;/<span class="name">hellp-world</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">hellp-world</span>&gt;</span><span class="tag">&lt;/<span class="name">hellp-world</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">hellp-world</span>&gt;</span><span class="tag">&lt;/<span class="name">hellp-world</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="组件的组织"><a href="#组件的组织" class="headerlink" title="组件的组织"></a>组件的组织</h2><p>一个应用会以一颗嵌套的组件树的形式来组织:<br><img data-src="../image/components.png" alt="component"></p>
<h2 id="通过-Prop-向子组件传递数据"><a href="#通过-Prop-向子组件传递数据" class="headerlink" title="通过 Prop 向子组件传递数据"></a>通过 <code>Prop</code> 向子组件传递数据</h2><p>Prop 是可以在组件上注册的一些自定义 attribute, 当一个值传递给一个 prop attribute 的时候, 他就变成了那个组件实例的一个属性.<br>我们可以用一个 <code>props</code> 选项将其包含在该组件可接受的 prop 列表中</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">Vue.component(<span class="string">'hello-world'</span>, &#123;</span><br><span class="line">  props: [<span class="string">'title'</span>],</span><br><span class="line">  template: <span class="string">'&lt;h3&gt; &#123;&#123; title &#125;&#125;&lt;/h3&gt;'</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h2 id="单个根元素"><a href="#单个根元素" class="headerlink" title="单个根元素"></a>单个根元素</h2><blockquote>
<p>每个组件必须只有一个根元素</p>
</blockquote>
<p>当构建一个子组件的时候, 模板内最终包含的内容远不止一个标题, Vue 要求每个组件必须只有一个根元素, 可以将模板的内容包裹在一个父元素内.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// parent 父组件</span></span><br><span class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"parent"</span>&gt;</span><br><span class="line">  &lt;child /&gt;</span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ child 子组件</span></span><br><span class="line"><span class="regexp">&lt;div class="child"&gt;</span></span><br><span class="line"><span class="regexp">  &lt;h3&gt;标题&lt;/</span>h3&gt;</span><br><span class="line">  &lt;p&gt;内容&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>div&gt;</span><br></pre></td></tr></table></figure>

<h2 id="监听子组件事件"><a href="#监听子组件事件" class="headerlink" title="监听子组件事件"></a>监听子组件事件</h2><p>有时候, 我们需要在子组件内部传递一些内容到父元素<br>Vue 实例提供了一个自定义事件的系统来解决这个问题, 父组件可以像处理 native DOM 事件一样通过 <code>v-on</code> 监听子组件实例的任意事件</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 父组件 接受一个由子元素提交的自定义方法</span></span><br><span class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"parent"</span>&gt;</span><br><span class="line">  &lt;child v-on:myEmit=<span class="string">"handleEmit"</span> /&gt;</span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ 子组件 传递一个自定义事件</span></span><br><span class="line"><span class="regexp">&lt;child v-on:click="$emit('myEmit')"&gt;</span></span><br><span class="line"><span class="regexp">  子组件</span></span><br><span class="line"><span class="regexp">&lt;/</span>child&gt;</span><br><span class="line"></span><br><span class="line">&lt;hr /&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 父组件 接受一个由子元素提交的自定义方法</span></span><br><span class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"parent"</span>&gt;</span><br><span class="line">  &lt;child v-on:myEmit=<span class="string">"handleEmit"</span> /&gt;</span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ 子组件 自定义方法可以通过第二个参数进行传递</span></span><br><span class="line"><span class="regexp">&lt;child v-on:click="$emit('myEmit', true)"&gt;</span></span><br><span class="line"><span class="regexp">  子组件</span></span><br><span class="line"><span class="regexp">&lt;/</span>child&gt;</span><br></pre></td></tr></table></figure>

<h2 id="在组件上使用-v-model"><a href="#在组件上使用-v-model" class="headerlink" title="在组件上使用 v-model"></a>在组件上使用 v-model</h2><p>自定义事件也可以用于创建支持 <code>v-model</code> 的自定义输入组件</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">my-input</span> <span class="attr">v-model</span>=<span class="string">"searchText"</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<p>等价于</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">my-input</span> <span class="attr">v-bind:value</span>=<span class="string">"searchText"</span> <span class="attr">v-on:input</span>=<span class="string">"searchText = $event"</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<p>为了让它正常工作, 这个组件内的 <code>&lt;input&gt;</code> 必须:</p>
<ul>
<li>将其 value attribute 绑定到一个名叫 value 的 prop 上</li>
<li>在其 input 事件被触发时, 将新的值通过自定义的 input 事件抛出</li>
</ul>
<h2 id="通过插槽分发内容"><a href="#通过插槽分发内容" class="headerlink" title="通过插槽分发内容"></a>通过插槽分发内容</h2><p>和 HTML 元素一样, 我们经常需要向一个组件传递内容</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 父组件使用子组件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">alert-box</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span>&gt;</span>插槽插入内容<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">alert-box</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 子组件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">alert-box</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 插槽插入内容会替换下面的slot标签 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">slot</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">alert-box</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="动态组件"><a href="#动态组件" class="headerlink" title="动态组件"></a>动态组件</h2><p>有的时候, 在不同的组件之间进行动态切换时非常有用的<br>我们可以通过 Vue 的<code>&lt;component&gt;</code>元素加一个特殊的<code>is</code>attribute 来实现<br><code>currentTabComponent</code> 可以包括</p>
<ul>
<li>已注册组件的名字</li>
<li>一个组件的选项对象</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 组件会在 currentTabComponent 改变时改变</span></span><br><span class="line">&lt;component v-bind:is=<span class="string">"currentTabComponent"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">component</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>vue表单输入绑定</title>
    <url>/2020/02/04/vue%E8%A1%A8%E5%8D%95%E8%BE%93%E5%85%A5%E7%BB%91%E5%AE%9A/</url>
    <content><![CDATA[<h2 id="基础用法"><a href="#基础用法" class="headerlink" title="基础用法"></a>基础用法</h2><p>你可以用 <code>v-model</code> 指令在表单 <code>&lt;input&gt;</code>、<code>&lt;textarea&gt;</code>、<code>&lt;select&gt;</code> 元素上创建双向数据绑定. 它会根据控件类型自动选取正确的方法来更新元素. 但<code>v-model</code>的本质只是语法糖</p>
<blockquote>
<p><code>v-model</code> 会忽略所有表单元素的 <code>vaule</code>、<code>checked</code>、<code>select</code>的初始值, 而使用 Vue 实例中数据作为数据来源, 所以我们需要在 data 中声明初始值</p>
</blockquote>
<p><code>v-model</code> 在内部为不同的表单元素使用不同的属性并抛出不同的事件:</p>
<ul>
<li>text 和 textarea 元素使用 <code>value</code> 属性和 <code>input</code> 事件</li>
<li>checkbox 和 radio 使用 <code>checked</code> 属性和 <code>change</code> 事件</li>
<li>select 字段将 <code>value</code> 作为 prop 并将 <code>change</code> 作为事件</li>
</ul>
<h3 id="文本"><a href="#文本" class="headerlink" title="文本"></a>文本</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"hello"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model</span>=<span class="string">"msg"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">textarea</span> <span class="attr">v-model</span>=<span class="string">"msg"</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; msg &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line">    data() &#123;</span><br><span class="line"><span class="actionscript">      <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="actionscript">        msg: <span class="string">'Hi'</span></span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="复选框"><a href="#复选框" class="headerlink" title="复选框"></a>复选框</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"hello"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 单个复选框 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">id</span>=<span class="string">"checkbox"</span> <span class="attr">v-model</span>=<span class="string">"checked"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"checkbox"</span>&gt;</span><span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; checked &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 多个复选框 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">id</span>=<span class="string">"Jack"</span> <span class="attr">value</span>=<span class="string">"Jack"</span> <span class="attr">v-model</span>=<span class="string">"checkes"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">value</span>=<span class="string">"Ginger"</span> <span class="attr">v-model</span>=<span class="string">"checkes"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">value</span>=<span class="string">"Som"</span> <span class="attr">v-model</span>=<span class="string">"checkes"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; checkes &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line">    data() &#123;</span><br><span class="line"><span class="actionscript">      <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="actionscript">        checked: <span class="literal">false</span>,</span></span><br><span class="line">        checkes: []</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="单选框"><a href="#单选框" class="headerlink" title="单选框"></a>单选框</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"hello"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"y"</span>&gt;</span></span><br><span class="line">      Yes</span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">id</span>=<span class="string">"y"</span> <span class="attr">value</span>=<span class="string">"y"</span> <span class="attr">v-model</span>=<span class="string">"res"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"n"</span>&gt;</span></span><br><span class="line">      No</span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">id</span>=<span class="string">"n"</span> <span class="attr">value</span>=<span class="string">"n"</span> <span class="attr">v-model</span>=<span class="string">"res"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; res &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line">    data() &#123;</span><br><span class="line"><span class="actionscript">      <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="actionscript">        res: <span class="string">''</span></span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="选择框"><a href="#选择框" class="headerlink" title="选择框"></a>选择框</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"hello"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">v-model</span>=<span class="string">"selectd"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">option</span> <span class="attr">disabled</span> <span class="attr">value</span>&gt;</span>点击选择<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">option</span>&gt;</span>A<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">option</span>&gt;</span>B<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">option</span>&gt;</span>C<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; selectd &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line">    data() &#123;</span><br><span class="line"><span class="actionscript">      <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="actionscript">        selectd: <span class="string">''</span></span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="修饰符"><a href="#修饰符" class="headerlink" title="修饰符"></a>修饰符</h2><h3 id="lazy-修饰符"><a href="#lazy-修饰符" class="headerlink" title=".lazy 修饰符"></a><code>.lazy</code> 修饰符</h3><p><code>v-model</code> 会在每次 <code>input</code> 事件触发后将输入框的值与数据进行同步, 可以通过添加 <code>.lazy</code> 修饰符, 从而转变为使用 <code>change</code> 事件进行同步</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"hello"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model.lazy</span>=<span class="string">"msg"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>change update: &#123;&#123; msg &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line">    data() &#123;</span><br><span class="line"><span class="actionscript">      <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="actionscript">        msg: <span class="string">''</span></span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="number-修饰符"><a href="#number-修饰符" class="headerlink" title=".number 修饰符"></a><code>.number</code> 修饰符</h3><p>如果想将用户输入值转为数值类型, 可以给 <code>v-model</code> 添加 <code>number</code> 修饰符</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- string =&gt; number --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model.number</span>=<span class="string">"age"</span> <span class="attr">type</span>=<span class="string">"number"</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="trim"><a href="#trim" class="headerlink" title=".trim"></a><code>.trim</code></h3><p>如果要自动过滤用户输入的收尾空白字符, 可以给 <code>v-model</code> 添加 <code>trim</code> 修饰符</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model.trim</span>=<span class="string">"msg"</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="在组件上使用-v-model"><a href="#在组件上使用-v-model" class="headerlink" title="在组件上使用 v-model"></a>在组件上使用 v-model</h2><p>在原生 HTML 的输入元素不能满足需求时, Vue 允许创建自定义行为的输入组件, 并且可以绑定 <code>v-model</code> 一起使用</p>
]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>vue事件处理</title>
    <url>/2020/02/04/vue%E4%BA%8B%E4%BB%B6%E5%A4%84%E7%90%86/</url>
    <content><![CDATA[<h2 id="监听事件"><a href="#监听事件" class="headerlink" title="监听事件"></a>监听事件</h2><p>可以用 <code>v-on</code> 指令监听 DOM 事件, 并在触发时运行一些 JavaScript 代码</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">"count += 1"</span>&gt;</span>+1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123; count &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">  <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">    el: <span class="string">'app'</span>,</span></span><br><span class="line">    data: &#123;</span><br><span class="line">      count: 0</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="事件处理方法"><a href="#事件处理方法" class="headerlink" title="事件处理方法"></a>事件处理方法</h3><p>大多时候, 我们的事件处理逻辑都是复杂的, 这时候直接写在 <code>v-on</code> 指令中是不可行的, 因此 <code>v-on</code> 还可以接受一个需要调用的方法名称</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">"add"</span>&gt;</span>+1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123; count &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">  <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">    el: <span class="string">'app'</span>,</span></span><br><span class="line">    data: &#123;</span><br><span class="line">      count: 0</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">      add() &#123;</span><br><span class="line"><span class="actionscript">        <span class="comment">// this 指向当前 vue 实例</span></span></span><br><span class="line"><span class="actionscript">        <span class="keyword">this</span>.count += <span class="number">1</span></span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"><span class="actionscript">  vm.add() <span class="comment">// 也可以直接用实例调用此方法</span></span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="内联处理器中的方法"><a href="#内联处理器中的方法" class="headerlink" title="内联处理器中的方法"></a>内联处理器中的方法</h3><p>除了在 <code>v-on</code> 指令后面绑定一个方法, 我们也可以在内联的 JavaScript 语句中调用方法<br>有时候我们需要在方法中访问原生的 DOM 事件, 可以用特殊的变量 <code>$event</code> 把它传入方法</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">"log('Hi')"</span>&gt;</span>+1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">  <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">    el: <span class="string">'app'</span>,</span></span><br><span class="line">    methods: &#123;</span><br><span class="line">      log(msg) &#123;</span><br><span class="line"><span class="actionscript">        <span class="comment">// this 指向当前 vue 实例</span></span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(msg)</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="事件修饰符"><a href="#事件修饰符" class="headerlink" title="事件修饰符"></a>事件修饰符</h2><p>在日常开发场景中, <code>event.preventDefault()</code> 或 <code>event.stopPropagation()</code> 是非常常见的需求<br>为了解决此类场景, Vue 为 <code>v-on</code> 提供了<strong>事件修饰符</strong></p>
<blockquote>
<p>修饰符是由<strong>点</strong>开头的指令后缀表示</p>
</blockquote>
<ul>
<li><code>.stop</code> 阻止事件继续传播</li>
<li><code>.prevent</code> 提交事件不再重载页面</li>
<li><code>.captrue</code> 使用事件捕获模式</li>
<li><code>.self</code> 只在 event.target 是当前元素资深时触发处理函数</li>
<li><code>.once</code> 点击事件将只会触发一次</li>
<li><code>.passive</code> 滚动事件的默认行为将会立即触发, 不会等待 <code>onScroll</code> 完成</li>
</ul>
<h2 id="按键修饰符"><a href="#按键修饰符" class="headerlink" title="按键修饰符"></a>按键修饰符</h2><p>在监听键盘事件时, 我们经常要检查详细的按键, Vue 允许为 <code>v-on</code> 在监听键盘事件时添加按键修饰符</p>
<ul>
<li><code>.enter</code> 回车键</li>
<li><code>.tab</code> tab 键</li>
<li><code>.delete</code> 删除和退格键</li>
<li><code>.esc</code></li>
<li><code>.space</code></li>
<li><code>.up</code></li>
<li><code>.down</code></li>
<li><code>.left</code></li>
<li><code>.right</code></li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 只有在 `key` 是 `Enter` 时调用 `vm.submit()` --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-on:keyup.enter</span>=<span class="string">"submit"</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>Vue 允许我们将 <code>keyboardEvent.key</code> 暴露的任意有效按键名转换为 kebab-case 来作为修饰符<br>还可以通过全局 <code>config.keyCodes</code> 对象自定义按键修饰符别名 Vue.config.keyCodes.f1 = 112</p>
</blockquote>
<h2 id="系统修饰符"><a href="#系统修饰符" class="headerlink" title="系统修饰符"></a>系统修饰符</h2><p>可以用以下修饰符来实现仅在按下相应按键时才出发鼠标或键盘事件的监听器</p>
<ul>
<li><code>.ctrl</code></li>
<li><code>.alt</code></li>
<li><code>.shift</code></li>
<li><code>.meta</code></li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- alt + c --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> @<span class="attr">keyup.alt.67</span>=<span class="string">"clear"</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="exact-修饰符"><a href="#exact-修饰符" class="headerlink" title=".exact 修饰符"></a><code>.exact</code> 修饰符</h2><p><code>.exact</code>修饰符允许控制由精确的系统修饰符组合触发的事件</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 即使 alt 或 shift 被一同按下时也会触发 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click.ctrl</span>=<span class="string">"onClick"</span>&gt;</span>a<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 有且只有 ctrl 被按下时才触发 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click.ctrl.exact</span>=<span class="string">"onClick"</span>&gt;</span>a<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="鼠标按钮修饰符"><a href="#鼠标按钮修饰符" class="headerlink" title="鼠标按钮修饰符"></a>鼠标按钮修饰符</h2><ul>
<li><code>.left</code></li>
<li><code>.right</code></li>
<li><code>.middle</code></li>
</ul>
]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>vue列表渲染</title>
    <url>/2020/02/04/vue%E5%88%97%E8%A1%A8%E6%B8%B2%E6%9F%93/</url>
    <content><![CDATA[<h2 id="v-for"><a href="#v-for" class="headerlink" title="v-for"></a>v-for</h2><p>我们可以用<code>v-for</code>指令基于一个数组来渲染一个列表. <code>v-for</code>指令需要使用 <code>item in items</code>形式的特殊语法, 其中<code>items</code>是源数据数组, 而<code>item</code>则是被迭代的数组元素的<strong>别名</strong></p>
<blockquote>
<p>也可以用<code>of</code>替代<code>in</code>作为分隔符<br>v-for 可以接受整数, 它会将模板重复对应次数<br>v-for 的对象也可以是一个计算属性或一个方法<br>可以在<code>&lt;template&gt;</code>元素上使用 v-for<br>不推荐在同一个元素上直接使用 v-for 与 v-if, v-for 的优先级高于 v-if</p>
</blockquote>
<h3 id="遍历数组"><a href="#遍历数组" class="headerlink" title="遍历数组"></a>遍历数组</h3><ul>
<li>items 遍历源数据</li>
<li>item 遍历项</li>
<li>index 索引值</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"hello"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>滴滴搭<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"(item, index) in items"</span> <span class="attr">:key</span>=<span class="string">"item"</span>&gt;</span>&#123;&#123; item &#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="actionscript">    name: <span class="string">'HelloWorld'</span>,</span></span><br><span class="line">    data() &#123;</span><br><span class="line"><span class="actionscript">      <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="actionscript">        items: [<span class="string">'html'</span>, <span class="string">'css'</span>, <span class="string">'js'</span>, <span class="string">'vue'</span>, <span class="string">'react'</span>]</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="遍历对象"><a href="#遍历对象" class="headerlink" title="遍历对象"></a>遍历对象</h3><blockquote>
<p>遍历对象会按照 Object.keys() 的结果遍历</p>
</blockquote>
<ul>
<li>objs 源数据对象</li>
<li>key 键</li>
<li>val 值</li>
<li>index 索引</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"hello"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>滴滴<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"(val, key, index) of objs"</span> <span class="attr">:key</span>=<span class="string">"key"</span>&gt;</span></span><br><span class="line">        &#123;&#123; index &#125;&#125;-&#123;&#123; key &#125;&#125;-&#123;&#123;val&#125;&#125;</span><br><span class="line">      <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="actionscript">    name: <span class="string">'HelloWorld'</span>,</span></span><br><span class="line">    data() &#123;</span><br><span class="line"><span class="actionscript">      <span class="keyword">return</span> &#123;</span></span><br><span class="line">        objs: &#123;</span><br><span class="line"><span class="actionscript">          name: <span class="string">'Ginger'</span>,</span></span><br><span class="line">          age: 24</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="维护状态"><a href="#维护状态" class="headerlink" title="维护状态"></a>维护状态</h2><p>Vue 在使用 <code>v-for</code> 渲染元素列表时, 如果数据项顺序发生改变, Vue 将不会移动 DOM 元素来匹配数据项的顺序, 而是就地更新每个元素, 并且确保他们每个索引位置正确渲染.<br>为了使 Vue 能跟踪每个节点的身份, 从而重用和重新排序现有元素, 我们需要为每项提供一个唯一的 key 属性</p>
<blockquote>
<p>不推荐使用对象或数之类的非基本类型值作为 v-for 的 key, 推荐使用字符串或数值类型</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-for</span>=<span class="string">"item in items"</span> <span class="attr">v-bind:key</span>=<span class="string">"item.id"</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 内容 --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="数组更新检测"><a href="#数组更新检测" class="headerlink" title="数组更新检测"></a>数组更新检测</h2><h3 id="变异方法"><a href="#变异方法" class="headerlink" title="变异方法"></a>变异方法</h3><p>Vue 将被侦听的数组的编译方法进行了包裹, 所以他们也将会触发试图更新</p>
<ul>
<li>push()</li>
<li>pop()</li>
<li>shift()</li>
<li>unshift()</li>
<li>splice()</li>
<li>sort()</li>
<li>reverse()</li>
</ul>
<h3 id="替换数组"><a href="#替换数组" class="headerlink" title="替换数组"></a>替换数组</h3><p>Vue 除了提供变异方法外, 还提供了非变异方法, 他们不会改变原始数组, 而总是返回一个数组</p>
<ul>
<li>filter()</li>
<li>concat()</li>
<li>slice()</li>
</ul>
<h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><p>由于 JavaScript 限制, Vue 不能检测以下数组变动</p>
<ul>
<li>利用索引直接修改数组某一项时</li>
<li>修改数组长度时</li>
</ul>
<h3 id="Set-方法"><a href="#Set-方法" class="headerlink" title="Set 方法"></a>Set 方法</h3><p>为了解决无法检测到数组变动的问题, Vue 提供了以下两个方法, 或者使用其他变异方式等进行处理</p>
<ul>
<li>Vue.set()</li>
<li>vm.$set()</li>
</ul>
<h2 id="对象变更检测"><a href="#对象变更检测" class="headerlink" title="对象变更检测"></a>对象变更检测</h2><p>由于 JavaScript 限制, Vue 不能检测对象属性的添加或删除<br>对于已创建的 Vue 实例, Vue 不允许动态添加根级别的响应式属性, 但是可以用 <code>Vue.set(object, propertyName, value)</code> 方法向嵌套对象添加响应式属性</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">'app'</span>,</span><br><span class="line">  data: &#123;</span><br><span class="line">    obj: &#123;</span><br><span class="line">      name: <span class="string">'ginger'</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 添加单个属性</span></span><br><span class="line">vm.$<span class="keyword">set</span>(vm.obj, 'age', 18)</span><br><span class="line">// 添加多个属性</span><br><span class="line">vm.obj = Object.assign(&#123;&#125;, vm.obj, &#123;</span><br><span class="line">  gender: <span class="number">0</span></span><br><span class="line">  address: <span class="string">'China'</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h2 id="在组件上使用-v-for"><a href="#在组件上使用-v-for" class="headerlink" title="在组件上使用 v-for"></a>在组件上使用 v-for</h2><p>我们可以在任何自定义组件上使用 v-for 但是我们必须定义 key<br>如果要将遍历内容数据传递到组件内, 需要使用 props</p>
]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>vue条件渲染</title>
    <url>/2020/02/03/vue%E6%9D%A1%E4%BB%B6%E6%B8%B2%E6%9F%93/</url>
    <content><![CDATA[<h2 id="v-if"><a href="#v-if" class="headerlink" title="v-if"></a>v-if</h2><p><code>v-if</code> 指令用于条件性的渲染一块内容. 该内容只有在表达式结果返回 <code>true</code> 值的时候被渲染</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">"true"</span>&gt;</span>v-if表达式结果为真时显示<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="lt-template-gt-元素"><a href="#lt-template-gt-元素" class="headerlink" title="&lt;template&gt; 元素"></a><code>&lt;template&gt;</code> 元素</h3><p><code>&lt;template&gt;</code> 元素是 Vue 给我们提供的内置元素, 它不会显示在页面中<br>如果我们要对多个元素使用<code>v-if</code>指令, 可以使用 <code>&lt;template&gt;</code> 元素包裹所有需要作用的元素</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">v-if</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h3</span>&gt;</span>title<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>...content<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="v-else"><a href="#v-else" class="headerlink" title="v-else"></a>v-else</h3><p>可以使用 <code>v-else</code> 指令来表示 <code>v-if</code> 的’else’块<br><code>v-else</code> 元素必须紧跟在带 <code>v-if</code> 或者 <code>v-else-if</code> 的元素后面, 否则它将不会被识别</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">"Math.random() &gt; 0.5"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-else</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="v-else-if"><a href="#v-else-if" class="headerlink" title="v-else-if"></a>v-else-if</h3><p><code>v-else-if</code>, 可以充当<code>v-if</code>的’else-if’块, 可以连续使用, 也必须紧跟在带<code>v-if</code>或者<code>v-else-if</code>元素之后</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">"type==='A'"</span>&gt;</span>A<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-else-if</span>=<span class="string">"type==='B'"</span>&gt;</span>B<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-else-if</span>=<span class="string">"type==='C'"</span>&gt;</span>C<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-else</span>=<span class="string">"type==='D'"</span>&gt;</span>A<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="key"><a href="#key" class="headerlink" title="key"></a>key</h3><p>Vue 会尽可能高效的渲染元素, 通常会复用已有元素而不是从头开始渲染, 这么做会使 Vue 变得非常快<br>但有时候, 我们并不希望使用此特性, Vue 为我们一种方式来表达不复用, 只需要添加一个具有唯一值的<code>key</code>属性即可</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class&#x3D;&quot;hello&quot;&gt;</span><br><span class="line">    &lt;template v-if&#x3D;&quot;loginType&quot;&gt;</span><br><span class="line">      &lt;label&gt;Username&lt;&#x2F;label&gt;</span><br><span class="line">      &lt;input placeholder&#x3D;&quot;Enter your username&quot; key&#x3D;&quot;username&quot; &#x2F;&gt;</span><br><span class="line">    &lt;&#x2F;template&gt;</span><br><span class="line">    &lt;template v-else&gt;</span><br><span class="line">      &lt;label&gt;Email&lt;&#x2F;label&gt;</span><br><span class="line">      &lt;input placeholder&#x3D;&quot;Enter your email address&quot; key&#x3D;&quot;pwd&quot; &#x2F;&gt;</span><br><span class="line">    &lt;&#x2F;template&gt;</span><br><span class="line">    &lt;button @click&#x3D;&quot;handle&quot;&gt;toog&lt;&#x2F;button&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &#39;HelloWorld&#39;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    handle() &#123;</span><br><span class="line">      this.loginType &#x3D; !this.loginType</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      loginType: true</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>

<h2 id="v-show"><a href="#v-show" class="headerlink" title="v-show"></a>v-show</h2><p>另一个根据条件展示元素的选项是<code>v-show</code>指令, 用法与<code>v-if</code>大致一样:</p>
<blockquote>
<p>v-show 不支持 <code>&lt;template&gt;</code> 元素, 也不支持 v-else</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-show</span>=<span class="string">"true"</span>&gt;</span>Ginger<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="v-if-vs-v-show"><a href="#v-if-vs-v-show" class="headerlink" title="v-if vs v-show"></a>v-if vs v-show</h2><ul>
<li>v-if 是真正的条件渲染, 他会在切换过程中适当的将事件监听器和子组件适当地被销毁和重建</li>
<li>v-if 是惰性的, 如果在初始渲染时条件为假, 元素便不会渲染, 只到条件第一次为真时, 才会开始渲染</li>
<li>v-show 不管初始条件是什么, 元素总是会被渲染, 并且只是基于 CSS 进行切换</li>
</ul>
<h2 id="v-if-与-v-show-一起使用"><a href="#v-if-与-v-show-一起使用" class="headerlink" title="v-if 与 v-show 一起使用"></a>v-if 与 v-show 一起使用</h2><p>当<code>v-if</code>与<code>v-for</code>一起使用时, <code>v-for</code>具有比<code>v-if</code>更高的优先级</p>
<blockquote>
<p>不推荐同时使用 <code>v-if</code> 和 <code>v-else</code></p>
</blockquote>
]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>vue中class与style绑定</title>
    <url>/2020/02/03/vue%E4%B8%ADclass%E4%B8%8Estyle%E7%BB%91%E5%AE%9A/</url>
    <content><![CDATA[<h2 id="绑定-HTML-Class"><a href="#绑定-HTML-Class" class="headerlink" title="绑定 HTML Class"></a>绑定 HTML Class</h2><p>Vue 对于 class 和 style 上使用<code>v-bind</code>做了专门的增强, 表达式结果的类型除了字符串之外, 还可以是对象或数组</p>
<h3 id="对象语法"><a href="#对象语法" class="headerlink" title="对象语法"></a>对象语法</h3><p>我们可以传给<code>v-bind:class</code>一个对象, 以动态的切换 class.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line">    &lt;!-- 传递一个对象 --&gt;</span><br><span class="line">    &lt;div :class&#x3D;&quot;&#123; box: showBox, box1: showBox &#125;&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class="line">    &lt;!-- class 与 绑定对象共存 --&gt;</span><br><span class="line">    &lt;div class&#x3D;&quot;box&quot; :class&#x3D;&quot;&#123; box1: showBox &#125;&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class="line">    &lt;!-- 接受一个对象 --&gt;</span><br><span class="line">    &lt;div :class&#x3D;&quot;classObj&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class="line">    &lt;!-- 接受一个计算属性 --&gt;</span><br><span class="line">    &lt;div :class&#x3D;&quot;isShowBox&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &#39;HelloWorld&#39;,</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      showBox: true,</span><br><span class="line">      classObj: &#123;</span><br><span class="line">        box: true,</span><br><span class="line">        box1: false</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  computed: &#123;</span><br><span class="line">    isShowBox() &#123;</span><br><span class="line">      return &#123;</span><br><span class="line">        box: true,</span><br><span class="line">        box1: true</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">.box &#123;</span><br><span class="line">  border: 1px solid red;</span><br><span class="line">  width: 100px;</span><br><span class="line">  height: 100px;</span><br><span class="line">&#125;</span><br><span class="line">.box1 &#123;</span><br><span class="line">  width: 60px;</span><br><span class="line">  height: 60px;</span><br><span class="line">  background-color: pink;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure>

<h3 id="数组语法"><a href="#数组语法" class="headerlink" title="数组语法"></a>数组语法</h3><p>我们还可以把一个数组传给 <code>v-bind:class</code>, 应用一个 class 列表</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line">    &lt;!-- 接受一个数组 --&gt;</span><br><span class="line">    &lt;div :class&#x3D;&quot;clsasArr&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class="line">    &lt;!-- 使用表达式 --&gt;</span><br><span class="line">    &lt;div :class&#x3D;&quot;[...clsasArr]&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class="line">    &lt;!-- 使用三元表达式 --&gt;</span><br><span class="line">    &lt;div :class&#x3D;&quot;[showBox ? &#39;box&#39; : &#39;&#39;]&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class="line">    &lt;!-- 对象与数组同时使用 --&gt;</span><br><span class="line">    &lt;div :class&#x3D;&quot;[&#123; box: showBox &#125;, &#39;box1&#39;]&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &#39;HelloWorld&#39;,</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      showBox: true,</span><br><span class="line">      clsasArr: [&#39;box&#39;, &#39;box1&#39;]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">.box &#123;</span><br><span class="line">  border: 1px solid red;</span><br><span class="line">&#125;</span><br><span class="line">.box1 &#123;</span><br><span class="line">  width: 60px;</span><br><span class="line">  height: 60px;</span><br><span class="line">  background-color: pink;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure>

<h3 id="用于组件上"><a href="#用于组件上" class="headerlink" title="用于组件上"></a>用于组件上</h3><p>当我们在一个自定义组件上使用 <code>class</code> 属性时, 这些 class 将被添加到该组件的根元素上, 这个元素上已存在的 class 不会被覆盖</p>
<h2 id="绑定内联样式"><a href="#绑定内联样式" class="headerlink" title="绑定内联样式"></a>绑定内联样式</h2><h3 id="对象语法-1"><a href="#对象语法-1" class="headerlink" title="对象语法"></a>对象语法</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line">    &lt;!-- 内联样式 --&gt;</span><br><span class="line">    &lt;div</span><br><span class="line">      class&#x3D;&quot;box&quot;</span><br><span class="line">      :style&#x3D;&quot;&#123; width: width + &#39;px&#39;, height: height + &#39;px&#39; &#125;&quot;</span><br><span class="line">    &gt;&lt;&#x2F;div&gt;</span><br><span class="line">    &lt;!-- 直接传入对象 --&gt;</span><br><span class="line">    &lt;div :style&#x3D;&quot;style&quot;&gt;box&lt;&#x2F;div&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &#39;HelloWorld&#39;,</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      width: 100,</span><br><span class="line">      height: 100,</span><br><span class="line">      style: &#123;</span><br><span class="line">        backgroundColor: &#39;pink&#39;,</span><br><span class="line">        color: &#39;#000&#39;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">div.box &#123;</span><br><span class="line">  border: 1px solid red;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure>

<h3 id="数组语法-1"><a href="#数组语法-1" class="headerlink" title="数组语法"></a>数组语法</h3><p><code>v-bind:style</code> 的数组语法可以将多个样式对象应用到同一个元素上</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line">    &lt;div :style&#x3D;&quot;arr&quot;&gt;box&lt;&#x2F;div&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &quot;HelloWorld&quot;,</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      arr: [&#123; color: &quot;red&quot; &#125;, &#123; border: &quot;1px solid red&quot; &#125;]</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br></pre></td></tr></table></figure>

<h3 id="自动添加前缀"><a href="#自动添加前缀" class="headerlink" title="自动添加前缀"></a>自动添加前缀</h3><p>当 <code>v-bind:style</code> 使用需要添加浏览器引擎前缀的 CSS 属性时，如 transform，Vue.js 会自动侦测并添加相应的前缀。</p>
<h3 id="多重值"><a href="#多重值" class="headerlink" title="多重值"></a>多重值</h3><p>可以为 style 绑定中的属性提供一个包含多个值的数组，常用于提供多个带前缀的值，例如：<br>这样写只会渲染数组中最后一个被浏览器支持的值。在本例中，如果浏览器支持不带浏览器前缀的 flexbox，那么就只会渲染 display: flex。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">:style</span>=<span class="string">"&#123; display: ['-webkit-box', '-ms-flexbox', 'flex'] &#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>vue计算属性与侦听器</title>
    <url>/2020/02/03/vue%E8%AE%A1%E7%AE%97%E5%B1%9E%E6%80%A7%E4%B8%8E%E4%BE%A6%E5%90%AC%E5%99%A8/</url>
    <content><![CDATA[<h2 id="计算属性"><a href="#计算属性" class="headerlink" title="计算属性"></a>计算属性</h2><p>虽然我们可以在模板内使用表达式, 但是设计初衷是用于简单的运算, 如果在模板中放入太多的逻辑会让模板过重难以维护</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123; message.split('').reverse().join() &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>原始message: &#123;&#123; message &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>计算属性message: &#123;&#123; newMessage &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="actionscript">    name: <span class="string">'HelloWorld'</span>,</span></span><br><span class="line">    data() &#123;</span><br><span class="line"><span class="actionscript">      <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="actionscript">        message: <span class="string">'Hello World'</span></span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    computed: &#123;</span><br><span class="line">      newMessage() &#123;</span><br><span class="line"><span class="actionscript">        <span class="keyword">return</span> <span class="keyword">this</span>.message</span></span><br><span class="line"><span class="actionscript">          .split(<span class="string">''</span>)</span></span><br><span class="line">          .reverse()</span><br><span class="line"><span class="actionscript">          .join(<span class="string">''</span>)</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="计算属性缓存-vs-方法"><a href="#计算属性缓存-vs-方法" class="headerlink" title="计算属性缓存 vs 方法"></a>计算属性缓存 vs 方法</h2><p>如果我们在<code>methods</code>中定义方法, 在模板中调用, 一样可以实现这个功能<br>不同的是, 计算属性是基于他们的响应式依赖进行缓存的, 只有在相关响应式依赖发生改变时他们才会重新计算求值</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>原始message: &#123;&#123; message &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>计算属性message: &#123;&#123; reverseStr() &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="actionscript">    name: <span class="string">'HelloWorld'</span>,</span></span><br><span class="line">    data() &#123;</span><br><span class="line"><span class="actionscript">      <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="actionscript">        message: <span class="string">'Hello World'</span></span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">      reverseStr() &#123;</span><br><span class="line"><span class="actionscript">        <span class="keyword">return</span> <span class="keyword">this</span>.message</span></span><br><span class="line"><span class="actionscript">          .split(<span class="string">''</span>)</span></span><br><span class="line">          .reverse()</span><br><span class="line"><span class="actionscript">          .join(<span class="string">''</span>)</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="计算属性的-getter"><a href="#计算属性的-getter" class="headerlink" title="计算属性的 getter"></a>计算属性的 getter</h3><p>计算属性默认只有 getter, 不过我们在需要时也可以提供一个 setter:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; firstName &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; lastName &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-if</span>=<span class="string">"fullNmae"</span>&gt;</span>&#123;&#123; fullNmae &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"()=&gt;&#123;fullNmae = 'Hi,Ginger'&#125;"</span>&gt;</span>update fullName<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="actionscript">    name: <span class="string">'HelloWorld'</span>,</span></span><br><span class="line">    data() &#123;</span><br><span class="line"><span class="actionscript">      <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="actionscript">        firstName: <span class="string">'Hello'</span>,</span></span><br><span class="line"><span class="actionscript">        lastName: <span class="string">'World'</span></span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    computed: &#123;</span><br><span class="line">      fullNmae: &#123;</span><br><span class="line"><span class="javascript">        <span class="keyword">get</span>() &#123;</span></span><br><span class="line"><span class="actionscript">          <span class="keyword">return</span> <span class="keyword">this</span>.firstName + <span class="keyword">this</span>.lastName</span></span><br><span class="line">        &#125;,</span><br><span class="line"><span class="javascript">        <span class="keyword">set</span>(newVal) &#123;</span></span><br><span class="line"><span class="javascript">          <span class="keyword">let</span> arr = newVal.split(<span class="string">','</span>)</span></span><br><span class="line"><span class="actionscript">          <span class="keyword">this</span>.firstName = arr[<span class="number">0</span>]</span></span><br><span class="line"><span class="actionscript">          <span class="keyword">this</span>.lastName = arr[<span class="number">1</span>]</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="侦听器"><a href="#侦听器" class="headerlink" title="侦听器"></a>侦听器</h2><p>Vue 通过<code>watch</code>选项提供了一个可自定义的侦听器来响应数据的变化, 当需要在数据变化时执行异步或开销较大的操作时, 适合使用过</p>
<h3 id="例子-1"><a href="#例子-1" class="headerlink" title="例子"></a>例子</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; content &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"onClick"</span>&gt;</span>page++<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="actionscript">    name: <span class="string">'HelloWorld'</span>,</span></span><br><span class="line">    data() &#123;</span><br><span class="line"><span class="actionscript">      <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="actionscript">        content: <span class="string">''</span>, <span class="comment">// 页面内容</span></span></span><br><span class="line"><span class="actionscript">        page: <span class="number">1</span> <span class="comment">// 页码</span></span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">      onClick() &#123;</span><br><span class="line"><span class="actionscript">        <span class="keyword">this</span>.page++</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    watch: &#123;</span><br><span class="line">      page(newVal) &#123;</span><br><span class="line"><span class="actionscript">        <span class="comment">// 根据页码发起数据请求 获取最新页数数据</span></span></span><br><span class="line">        ...</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="计算属性-vs-侦听属性"><a href="#计算属性-vs-侦听属性" class="headerlink" title="计算属性 vs 侦听属性"></a>计算属性 vs 侦听属性</h2><p>Vue 提供了一种更通用的方式来观察和响应 Vue 实例上的数据变动: <code>侦听属性</code>.<br>不过官方更推荐使用计算属性</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; fullName&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="actionscript">    name: <span class="string">'HelloWorld'</span>,</span></span><br><span class="line">    data() &#123;</span><br><span class="line"><span class="actionscript">      <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="actionscript">        firstName: <span class="string">'Hello'</span>,</span></span><br><span class="line"><span class="actionscript">        lastName: <span class="string">'World'</span>,</span></span><br><span class="line"><span class="actionscript">        fullName: <span class="string">''</span></span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    created() &#123;</span><br><span class="line"><span class="actionscript">      <span class="keyword">this</span>.firstName = <span class="string">'Hello'</span></span></span><br><span class="line">    &#125;,</span><br><span class="line"><span class="actionscript">    <span class="comment">// 侦听器实现 重复代码</span></span></span><br><span class="line">    watch: &#123;</span><br><span class="line">      firstName(val) &#123;</span><br><span class="line"><span class="actionscript">        <span class="keyword">return</span> (<span class="keyword">this</span>.fullName = val + <span class="keyword">this</span>.lastName)</span></span><br><span class="line">      &#125;,</span><br><span class="line">      lastName(val) &#123;</span><br><span class="line"><span class="actionscript">        <span class="keyword">return</span> (<span class="keyword">this</span>.fullName = <span class="keyword">this</span>.firstName + val)</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line"><span class="actionscript">    <span class="comment">// 计算属性实现 更简洁</span></span></span><br><span class="line">    computed: &#123;</span><br><span class="line">      fullName() &#123;</span><br><span class="line"><span class="actionscript">        <span class="keyword">return</span> <span class="keyword">this</span>.firstName + <span class="keyword">this</span>.lastName</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>vue模板语法</title>
    <url>/2020/02/02/vue%E6%A8%A1%E6%9D%BF%E8%AF%AD%E6%B3%95/</url>
    <content><![CDATA[<h2 id="模板语法"><a href="#模板语法" class="headerlink" title="模板语法"></a>模板语法</h2><p><code>Vue.js</code> 使用基于<code>html</code>的模板语法, 在底层上, <code>Vue</code>将模板编译成虚拟 DOM 渲染函数, 结合响应系统, 减少 DOM 操作次数</p>
<h2 id="插值"><a href="#插值" class="headerlink" title="插值"></a>插值</h2><h3 id="文本"><a href="#文本" class="headerlink" title="文本"></a>文本</h3><p>数据绑定最常用形式, 使用 Mustache 语法(双大括号)的文本插值<br>Mustache 标签会替换为对应数据对象上 msg 属性的值, 只要数据对象上 msg 属性发生了改变, 页面插值处内容也会更新</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>Message: &#123;&#123; msg &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="v-once"><a href="#v-once" class="headerlink" title="v-once"></a>v-once</h3><p>通过使用 v-once 指令, 可以实现一次性的插值, 当数据改变时, 插值处内容不会更新</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-once</span>&gt;</span>这个值不会改变: &#123;&#123; msg &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="原始-HTML"><a href="#原始-HTML" class="headerlink" title="原始 HTML"></a>原始 HTML</h3><p>双大括号会将数据编译为普通文本, 如果想要输出 HTML, 需要使用 <code>v-html</code> 指令</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>数据编译为普通文本 &#123;&#123; msg &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>数据编译为HTML内容 <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-html</span>=<span class="string">"html"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="Attribute"><a href="#Attribute" class="headerlink" title="Attribute"></a>Attribute</h3><p>Mustache 语法不能作用在 HTML attribute 上, 但是 Vue 给我们提供了<code>v-bind</code>指令</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:id</span>=<span class="string">"ID"</span>&gt;</span>绑定 id<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="JavaScript-表达式"><a href="#JavaScript-表达式" class="headerlink" title="JavaScript 表达式"></a>JavaScript 表达式</h3><blockquote>
<p>每个绑定只能包含单个表达式</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:id</span>=<span class="string">"'this-' + ID"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="指令"><a href="#指令" class="headerlink" title="指令"></a>指令</h2><p>指令是带有 <code>v-</code> 前缀的的特殊 attribute. 指令的作用是, 当表达式中的值发生变化时, 将其产生的连带影响, 响应式的作用于 DOM</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">"seen"</span>&gt;</span>v-if绑定的值控制着此 div 元素的插入与移除<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h3><p>部分指令可以接受一些’参数’, 在指令名称之后以冒号表示. 例:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- href是参数 表示将href的值与url进行绑定 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">v-bind:href</span>=<span class="string">"url"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- click是参数 表示监听的事件名与事件处理函数 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">v-on:click</span>=<span class="string">"onClick"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="动态参数"><a href="#动态参数" class="headerlink" title="动态参数"></a>动态参数</h3><p>可以用方括号括起来的 JavaScript 表达式作为一个指令的参数</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 此处的 attributeName 会被作为一个 JavaScript 表达式进行动态求值 求值结果将会作为最终的参数来使用 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">v-bind:</span>[<span class="attr">attributeName</span>]=<span class="string">"url"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="修饰符"><a href="#修饰符" class="headerlink" title="修饰符"></a>修饰符</h3><p>修饰符是以<code>.</code>为后缀指明的, 用于指出一个指令应该以特殊方式绑定</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 此处的 prevent 相当于在处理事件中添加 event.preventDetafult --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">v-on:submit.prevent</span>=<span class="string">"onSubmit"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span>&gt;</span>提交<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="缩写"><a href="#缩写" class="headerlink" title="缩写"></a>缩写</h3><p>对于一些频繁使用的指令, <code>Vue</code>为<code>v-bind</code>和<code>v-on</code>这两个最常用的指令, 提供了特定简写:</p>
<ul>
<li>v-bind</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 完成写法 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">v-bind:href</span>=<span class="string">"url"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 缩写 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">:href</span>=<span class="string">"url"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>v-on</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 完整写法 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">"submit"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 缩写 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"submit"</span>&gt;</span><span class="tag">&lt;<span class="name">button</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>vue实例</title>
    <url>/2020/02/02/vue%E5%AE%9E%E4%BE%8B/</url>
    <content><![CDATA[<h2 id="创建一个-Vue-实例"><a href="#创建一个-Vue-实例" class="headerlink" title="创建一个 Vue 实例"></a>创建一个 Vue 实例</h2><p>Vue 实例通过 <code>new</code> 一个 <code>Vue</code> 函数得到<br>在创建一个 <code>Vue</code> 实例的时候, 我们可以通过传入一个<strong>选项对象</strong>来构建我们需要的行为.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  <span class="comment">// 选项</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h2 id="数据与方法"><a href="#数据与方法" class="headerlink" title="数据与方法"></a>数据与方法</h2><p>当一个 <code>Vue</code> 实例被创建时, 它会将 <code>data</code> 对象中所有的属性加入到 <code>Vue</code> 的响应式系统中, 当他们发生改变时, 视图将会产生响应, 进行更新</p>
<blockquote>
<p>data 中数据只有在实例创建时就已存在的属性才是响应式的</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 数据对象</span></span><br><span class="line"><span class="keyword">var</span> data = &#123; <span class="attr">name</span>: <span class="string">'jack'</span> &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将数据对象加入到 Vue 实例中</span></span><br><span class="line"><span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">'app'</span></span><br><span class="line">  data: data</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取实例上的属性 返回源数据中对应的字段</span></span><br><span class="line">vm.name == data.a <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置属性也会影响到原始数据</span></span><br><span class="line">vm.name = <span class="string">'Ginger'</span></span><br><span class="line">data.a <span class="comment">// Ginger</span></span><br></pre></td></tr></table></figure>

<p><code>Vue</code> 实例暴露了一系列内置实例属性与方法, 他们都有*<strong>*$**</strong> 前缀</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">vm.$data === data <span class="comment">// true</span></span><br><span class="line">vm.$el === <span class="built_in">document</span>.getElementById(<span class="string">'app'</span>) <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<h2 id="实例生命周期"><a href="#实例生命周期" class="headerlink" title="实例生命周期"></a>实例生命周期</h2><p><code>Vue</code> 实例在创建时, 需要经过一系列的初始化过程, 在这个过程中, 会运行一些叫做<strong>生命周期钩子</strong>的函数, 这些钩子函数为用户提供了在实例创建过程中添加自己代码的机会</p>
<blockquote>
<p>生命周期钩子中的<code>this</code>上下文指向调用他的<code>vue</code>实例<br>不要使用箭头函数</p>
</blockquote>
<h3 id="生命周期钩子"><a href="#生命周期钩子" class="headerlink" title="生命周期钩子"></a>生命周期钩子</h3><ul>
<li>beforeCreate 实例创建前</li>
<li>created 实例创建后</li>
<li>beforeMount 挂载前</li>
<li>Mounted 挂载完毕</li>
<li>beforeupdate 实例数据更新前</li>
<li>updated 数据更新完毕</li>
<li>beforeDestroy 实例销毁前</li>
<li>destroyed 实例销毁完毕</li>
</ul>
<h3 id="生命周期图示"><a href="#生命周期图示" class="headerlink" title="生命周期图示"></a>生命周期图示</h3><p><img data-src="../image/vue%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F.png" alt="生命周期"></p>
]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>vue安装使用</title>
    <url>/2020/02/02/vue%E5%AE%89%E8%A3%85%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h2 id="Vue-Devtools"><a href="#Vue-Devtools" class="headerlink" title="Vue Devtools"></a>Vue Devtools</h2><p><a href="https://github.com/vuejs/vue-devtools#vue-devtools" target="_blank" rel="noopener">Devtools</a> 是一个 Vue 官方提供的浏览器插件, 他可以让我们在开发过程中国更直观更友好的的在浏览器中对 Vue 项目进行审查和调试</p>
<h3 id="版本"><a href="#版本" class="headerlink" title="版本"></a>版本</h3><p>Vue 分为开发版本和生产版本</p>
<ul>
<li>开发版本 - 包含完整的警告和调试模式</li>
<li>生产版本 - 删除了警告</li>
</ul>
<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><h3 id="直接引入-本地文件或-CDN"><a href="#直接引入-本地文件或-CDN" class="headerlink" title="直接引入(本地文件或 CDN)"></a>直接引入(本地文件或 CDN)</h3><p>在 html 文件中, 我们如果需要使用 Vue 可以直接使用 script 标签进行引入</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 最新版本 适合开发环境 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/npm/vue/dist/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 指定版本 适合生产环境追溯问题 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/npm/vue@2.6.11"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="NPM"><a href="#NPM" class="headerlink" title="NPM"></a>NPM</h3><p>在使用 Vue 开发大型应用时, 推荐使用 NPM 安装, NPM 能够很好的与 webpack 配合使用.</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> npm install vue</span></span><br></pre></td></tr></table></figure>

<h3 id="命令行工具"><a href="#命令行工具" class="headerlink" title="命令行工具"></a>命令行工具</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vue create hello-word</span><br></pre></td></tr></table></figure>

<p>Vue 提供了一个官方的 Cli, 为单页面应用(SPA)快速搭建繁杂的脚手架.</p>
<ul>
<li><a href="https://github.com/vuejs/vue-cli" target="_blank" rel="noopener">Cli GitHub</a></li>
<li><a href="https://cli.vuejs.org/zh/" target="_blank" rel="noopener">Cli 文档</a></li>
</ul>
]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>装饰器模式</title>
    <url>/2020/01/26/%E8%A3%85%E9%A5%B0%E5%99%A8%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h2 id="装饰器模式"><a href="#装饰器模式" class="headerlink" title="装饰器模式"></a>装饰器模式</h2><blockquote>
<p>装饰器模式是指在不改变原有对象的基础上, 对其进行包装扩展, 使其满足用户更复杂的需求.</p>
</blockquote>
<h2 id="复习下单例模式"><a href="#复习下单例模式" class="headerlink" title="复习下单例模式"></a>复习下单例模式</h2><p>使用单例模式维护一个全局的 Modal</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">      div &#123;</span><br><span class="line">        width: 200px;</span><br><span class="line">        height: 200px;</span><br><span class="line">        border: 1px solid pink;</span><br><span class="line">        color: pink;</span><br><span class="line">        position: fixed;</span><br><span class="line">        left: 50%;</span><br><span class="line">        top: 50%;</span><br><span class="line">        transform: translate(-50%, -50%);</span><br><span class="line">      &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"open"</span>&gt;</span>open<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"hidden"</span>&gt;</span>hidden<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">      <span class="keyword">const</span> Modal = (<span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> modal = <span class="literal">null</span></span></span><br><span class="line"><span class="actionscript">        <span class="keyword">return</span> <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line">          if (!modal) &#123;</span><br><span class="line"><span class="javascript">            modal = <span class="built_in">document</span>.createElement(<span class="string">'div'</span>)</span></span><br><span class="line"><span class="actionscript">            modal.style.display = <span class="string">'none'</span></span></span><br><span class="line"><span class="actionscript">            modal.innerText = <span class="string">'Modal'</span></span></span><br><span class="line"><span class="javascript">            <span class="built_in">document</span>.body.appendChild(modal)</span></span><br><span class="line">          &#125;</span><br><span class="line"><span class="actionscript">          <span class="keyword">return</span> modal</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)()</span><br><span class="line"></span><br><span class="line"><span class="javascript">      <span class="built_in">document</span>.getElementById(<span class="string">'open'</span>).addEventListener(</span></span><br><span class="line"><span class="actionscript">        <span class="string">'click'</span>,</span></span><br><span class="line"><span class="actionscript">        <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">          <span class="keyword">const</span> modal = <span class="keyword">new</span> Modal()</span></span><br><span class="line"><span class="javascript">          <span class="built_in">console</span>.log(modal)</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">          modal.style.display = <span class="string">'block'</span></span></span><br><span class="line">        &#125;,</span><br><span class="line"><span class="actionscript">        <span class="literal">false</span></span></span><br><span class="line">      )</span><br><span class="line"></span><br><span class="line"><span class="javascript">      <span class="built_in">document</span>.getElementById(<span class="string">'hidden'</span>).addEventListener(</span></span><br><span class="line"><span class="actionscript">        <span class="string">'click'</span>,</span></span><br><span class="line"><span class="actionscript">        <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">          <span class="keyword">const</span> modal = <span class="keyword">new</span> Modal()</span></span><br><span class="line"><span class="actionscript">          modal.style.display = <span class="string">'none'</span></span></span><br><span class="line">        &#125;,</span><br><span class="line"><span class="actionscript">        <span class="literal">false</span></span></span><br><span class="line">      )</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="问题来了"><a href="#问题来了" class="headerlink" title="问题来了"></a>问题来了</h2><p>这时候产品经理说, 需要修改下这个按钮文字内容, 还要给点击按钮置灰, 不可点击, 如果我们在项目多处用到的话, 就需要一处处进行修改<br>如果封装成公共组件, 也会因为组件应用时的需求复杂度而产生同样的问题</p>
<h2 id="装饰器模式改造案例"><a href="#装饰器模式改造案例" class="headerlink" title="装饰器模式改造案例"></a>装饰器模式改造案例</h2><p>第一步 抽离原有旧逻辑</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 原有对象保持不变</span></span><br><span class="line"><span class="keyword">const</span> Modal = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> modal = <span class="literal">null</span></span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!modal) &#123;</span><br><span class="line">      modal = <span class="built_in">document</span>.createElement(<span class="string">'div'</span>)</span><br><span class="line">      modal.style.display = <span class="string">'none'</span></span><br><span class="line">      modal.innerText = <span class="string">'Modal'</span></span><br><span class="line">      <span class="built_in">document</span>.body.appendChild(modal)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> modal</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">openModal</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 封装显示模态框逻辑</span></span><br><span class="line">  <span class="keyword">const</span> modal = <span class="keyword">new</span> Modal()</span><br><span class="line">  <span class="keyword">if</span> (modal) &#123;</span><br><span class="line">    modal.style.display = <span class="string">'block'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>第二步 封装新需求逻辑</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">changeBtnText</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 封装按钮文字修改逻辑</span></span><br><span class="line">  <span class="keyword">const</span> btn = <span class="built_in">document</span>.getElementById(<span class="string">'open'</span>)</span><br><span class="line">  btn.innerText = <span class="string">'快点我'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">disabledBtn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 封装按钮可否点击逻辑</span></span><br><span class="line">  <span class="keyword">const</span> btn = <span class="built_in">document</span>.getElementById(<span class="string">'open'</span>)</span><br><span class="line">  btn.setAttribute(<span class="string">'disabled'</span>, <span class="literal">true</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">changeBtnStatus</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 整和所有封装</span></span><br><span class="line">  changeBtnText()</span><br><span class="line">  disabledBtn()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>第三步 添加需求到点击按钮上</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">'open'</span>).addEventListener(</span><br><span class="line">  <span class="string">'click'</span>,</span><br><span class="line">  <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    openModal()</span><br><span class="line">    changeBtnStatus()</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="literal">false</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<h2 id="ES6-class-类实现装饰器"><a href="#ES6-class-类实现装饰器" class="headerlink" title="ES6 class 类实现装饰器"></a>ES6 class 类实现装饰器</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// class 单例模式 modal</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Modal</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>() &#123;</span><br><span class="line">    <span class="keyword">this</span>.modal = <span class="literal">null</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">static</span> getModal() &#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">this</span>.modal) &#123;</span><br><span class="line">      <span class="keyword">this</span>.modal = <span class="built_in">document</span>.createElement(<span class="string">'div'</span>)</span><br><span class="line">      <span class="keyword">this</span>.modal.innerText = <span class="string">'我是一个class单例模式下的div'</span></span><br><span class="line">      <span class="keyword">this</span>.modal.style.display = <span class="string">'none'</span></span><br><span class="line">      <span class="built_in">document</span>.body.appendChild(<span class="keyword">this</span>.modal)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.modal</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 装饰器模式</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">openModal</span> </span>&#123;</span><br><span class="line">  click() &#123;</span><br><span class="line">    <span class="keyword">const</span> modal = Modal.getModal()</span><br><span class="line">    modal.style.display = <span class="string">'block'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Decorator</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(open_button) &#123;</span><br><span class="line">    <span class="keyword">this</span>.open_btn = open_button</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  onclick() &#123;</span><br><span class="line">    <span class="comment">// 职责单一</span></span><br><span class="line">    <span class="keyword">this</span>.open_btn.click()</span><br><span class="line">    <span class="keyword">this</span>.changeBtnStatus()</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  changeBtnStatus() &#123;</span><br><span class="line">    <span class="keyword">this</span>.changeBtnText()</span><br><span class="line">    <span class="keyword">this</span>.disabledBtn()</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  changeBtnText() &#123;</span><br><span class="line">    <span class="keyword">const</span> btn = <span class="built_in">document</span>.getElementById(<span class="string">'open'</span>)</span><br><span class="line">    btn.innerText = <span class="string">'来点击我啊'</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  disabledBtn() &#123;</span><br><span class="line">    <span class="keyword">const</span> btn = <span class="built_in">document</span>.getElementById(<span class="string">'open'</span>)</span><br><span class="line">    btn.setAttor = <span class="string">'来点击我啊'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">'open'</span>).addEventListener(</span><br><span class="line">  <span class="string">'click'</span>,</span><br><span class="line">  <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> openBtn = <span class="keyword">new</span> openModal()</span><br><span class="line">    <span class="keyword">const</span> btn = <span class="keyword">new</span> Decorator(openBtn)</span><br><span class="line">    btn.onclick()</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="literal">false</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>原型模式</title>
    <url>/2020/01/25/%E5%8E%9F%E5%9E%8B%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h2 id="原型模式"><a href="#原型模式" class="headerlink" title="原型模式"></a>原型模式</h2><blockquote>
<p>在 JavaScript 中, Object.create() 是对原型模式的最好实现.</p>
</blockquote>
<h2 id="prototype-原型模式的应用"><a href="#prototype-原型模式的应用" class="headerlink" title="prototype 原型模式的应用"></a>prototype 原型模式的应用</h2><blockquote>
<p>JavaScript 中不存在 class , ES6 中 class 也只是原型继承的语法糖, 在 js 中我们常用的是通过 prototype 模拟类来得到类的实例, 实现实例间数据、方法的共享.</p>
</blockquote>
<h2 id="JavaScript-的原型与原型链"><a href="#JavaScript-的原型与原型链" class="headerlink" title="JavaScript 的原型与原型链"></a>JavaScript 的原型与原型链</h2><p>在 JavaScript 中, 创建一个对象有多种方式</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 通过 Object 构造函数创建对象</span></span><br><span class="line"><span class="keyword">const</span> obj = <span class="keyword">new</span> <span class="built_in">Object</span>(&#123;&#125;)</span><br><span class="line"><span class="comment">// 通过 create 创建对象</span></span><br><span class="line"><span class="keyword">const</span> obj2 = <span class="built_in">Object</span>.create(&#123;&#125;)</span><br><span class="line"><span class="comment">// 字面量方式创建对象</span></span><br><span class="line"><span class="keyword">const</span> obj3 = &#123;<span class="attr">name</span>: <span class="string">'Ginger'</span>&#125;</span><br><span class="line"><span class="comment">// ...</span></span><br></pre></td></tr></table></figure>

<ul>
<li>在 JavaScript 中每一个构造函数都有一个 prototype 属性, 该原型对象指向构造函数的原型对象, 原型对象中 construtor 指回该构造函数</li>
<li>每个实例对象, 都有一个 <code>__proto__</code> 属性, 该属性指向创建该实例对象的构造函数的原型对象</li>
</ul>
<p>通过 new 关键字, 获得 Fn 构造函数的实例对象, f 实例对象上并没有 hi 方法, 但是我们可以调用成功, 便是因为原型链的存在.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Fn</span>(<span class="params">name, age</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = name</span><br><span class="line">  <span class="keyword">this</span>.age = age</span><br><span class="line">&#125;</span><br><span class="line">Fn.prototype.hi = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'Hi'</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> f = <span class="keyword">new</span> Fn()</span><br><span class="line">f.hi() <span class="comment">// Hi</span></span><br><span class="line"><span class="built_in">console</span>.log(f.__proto__ === Fn.prototype) <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<h2 id="一个简单的深拷贝"><a href="#一个简单的深拷贝" class="headerlink" title="一个简单的深拷贝"></a>一个简单的深拷贝</h2><p>通过两个 api 对 obj 对象进行拷贝, 得到 obj2 改变 obj2 后, obj 内容未发生改变, 但是如果 obj 不是一个严格 json 格式的数据, 他的值是还是一个对象的时候, 这个就无法处理了</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  name:<span class="string">'Ginger'</span>,</span><br><span class="line">  age:<span class="number">24</span>,</span><br><span class="line">  web:[<span class="string">'html'</span>, <span class="string">'js'</span>, <span class="string">'css'</span>]</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> obj2 = <span class="built_in">JSON</span>.parse(<span class="built_in">JSON</span>.stringify(obj))</span><br><span class="line">obj2.web.splice(<span class="number">0</span>,<span class="number">1</span>)</span><br><span class="line"><span class="built_in">console</span>.log(obj.web) <span class="comment">// ['html', 'js', 'css']</span></span><br><span class="line"><span class="built_in">console</span>.log(obj2.web) <span class="comment">// ["js", "css"]</span></span><br></pre></td></tr></table></figure>

<h2 id="另外一个深拷贝"><a href="#另外一个深拷贝" class="headerlink" title="另外一个深拷贝"></a>另外一个深拷贝</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">DeepClone</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 边界判断</span></span><br><span class="line">  <span class="keyword">if</span>(<span class="keyword">typeof</span> obj !== <span class="string">'object'</span> || obj === <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> obj</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 初始化结果值</span></span><br><span class="line">  <span class="keyword">let</span> res = &#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 如果是数组</span></span><br><span class="line">  <span class="keyword">if</span>(obj.constructor === <span class="string">'array'</span>) &#123;</span><br><span class="line">    res = []</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> i <span class="keyword">in</span> obj) &#123;</span><br><span class="line">    <span class="keyword">if</span>(obj.hasOwnProperty(i)) &#123;</span><br><span class="line">      <span class="comment">// 如果值是对象 递归调用</span></span><br><span class="line">      res[i] = DeepClone(obj[i])</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> res</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>单例模式</title>
    <url>/2020/01/25/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h2 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h2><blockquote>
<p>单例模式下的类只能存在一个实例对象</p>
</blockquote>
<h2 id="非单例模式实例"><a href="#非单例模式实例" class="headerlink" title="非单例模式实例"></a>非单例模式实例</h2><p>在 JavaScript 中, 我们可以通过 class 类来实例化对象, 我们 new 出两个对象, 但是两个对象是没有直接关联的, 他们储存在不同的内存地址中, 不符合我们的单例模式</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line">  show() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'单例对象'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> s1 = <span class="keyword">new</span> Singleton()</span><br><span class="line"><span class="keyword">const</span> s2 = <span class="keyword">new</span> Singleton()</span><br><span class="line">s1 === s2 <span class="comment">// false 引用类型储存在堆的不同内存地址中</span></span><br></pre></td></tr></table></figure>

<h2 id="单例模式实例"><a href="#单例模式实例" class="headerlink" title="单例模式实例"></a>单例模式实例</h2><p>如果要实现单例模式, 我们需要保证只能存在一个实例对象, 这就要求我们的类具有是否已存在实例对象的功能</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 类 - 静态方法模拟</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line">  show() &#123;</span><br><span class="line">    consle.log(<span class="string">'我是一个单例对象'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">static</span> getInstance() &#123;</span><br><span class="line">    <span class="comment">// 静态方法 重点</span></span><br><span class="line">    <span class="keyword">if</span>(!Singleton.instance)&#123;</span><br><span class="line">      <span class="comment">// 判断是否已存在一个实例</span></span><br><span class="line">      Singleton.instance = <span class="keyword">new</span> Singleton() <span class="comment">// 如果没有就创建一个</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> Singleton.instance</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 闭包实现单例模式</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Singleton</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">Singleton.prototype.getInstance = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">let</span> instance <span class="comment">// 定义局部变量模拟 重点</span></span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!instance) &#123;</span><br><span class="line">      instance = <span class="keyword">new</span> Singleton()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> instance</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></figure>

<h2 id="单例模式应用"><a href="#单例模式应用" class="headerlink" title="单例模式应用"></a>单例模式应用</h2><p>通过单例模式管理全局唯一存在的一个 Model 模态框</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">      div &#123;</span><br><span class="line">        width: 200px;</span><br><span class="line">        height: 200px;</span><br><span class="line">        line-height: 200px;</span><br><span class="line">        border: 1px solid pink;</span><br><span class="line">        color: pink;</span><br><span class="line">        position: fixed;</span><br><span class="line">        top: 50%;</span><br><span class="line">        left: 50%;</span><br><span class="line">        transform: translate(-50%, -50%);</span><br><span class="line">        text-align: center;</span><br><span class="line">      &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"show"</span>&gt;</span>显示全局模拟框<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"hidden"</span>&gt;</span>隐藏全局模拟框<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> showbtn = <span class="built_in">document</span>.getElementById(<span class="string">'show'</span>)</span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> hiddenbtn = <span class="built_in">document</span>.getElementById(<span class="string">'hidden'</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">        <span class="comment">// 闭包实现</span></span></span><br><span class="line"><span class="actionscript">        <span class="keyword">const</span> Modal = (<span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">          <span class="keyword">let</span> modal = <span class="literal">null</span></span></span><br><span class="line"><span class="actionscript">          <span class="keyword">return</span> <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line">            if (!modal) &#123;</span><br><span class="line"><span class="javascript">              modal = <span class="built_in">document</span>.createElement(<span class="string">'div'</span>)</span></span><br><span class="line"><span class="actionscript">              modal.innerText = <span class="string">'我一个单例的模态框'</span></span></span><br><span class="line"><span class="actionscript">              modal.style.display = <span class="string">'none'</span></span></span><br><span class="line"><span class="actionscript">              modal.style.color = <span class="string">'pink'</span></span></span><br><span class="line"><span class="javascript">              <span class="built_in">document</span>.body.appendChild(modal)</span></span><br><span class="line">            &#125;</span><br><span class="line"><span class="actionscript">            <span class="keyword">return</span> modal</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;)()</span><br><span class="line"></span><br><span class="line">        showbtn.addEventListener(</span><br><span class="line"><span class="actionscript">          <span class="string">'click'</span>,</span></span><br><span class="line"><span class="actionscript">          <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">            <span class="keyword">const</span> modal = <span class="keyword">new</span> Modal()</span></span><br><span class="line"><span class="actionscript">            modal.style.display = <span class="string">'block'</span></span></span><br><span class="line">          &#125;,</span><br><span class="line"><span class="actionscript">          <span class="literal">false</span></span></span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">        hiddenbtn.addEventListener(</span><br><span class="line"><span class="actionscript">          <span class="string">'click'</span>,</span></span><br><span class="line"><span class="actionscript">          <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">            <span class="keyword">const</span> modal = <span class="keyword">new</span> Modal()</span></span><br><span class="line"><span class="actionscript">            modal.style.display = <span class="string">'none'</span></span></span><br><span class="line">          &#125;,</span><br><span class="line"><span class="actionscript">          <span class="literal">false</span></span></span><br><span class="line">        )</span><br><span class="line">      &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>抽象工厂模式</title>
    <url>/2020/01/23/%E6%8A%BD%E8%B1%A1%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h2 id="前情回顾"><a href="#前情回顾" class="headerlink" title="前情回顾"></a>前情回顾</h2><p>在实际的项目开发时, 我们面对的往往不是如此简单的工厂, 而是会面对多个工厂.</p>
<p>在简单工厂模式中, 如果我们再加入学生会干部, 就意味着我们需要修改我们的工厂函数. 长此以往, 我们的工厂函数会变得复杂臃肿.</p>
<p>回顾我们设计模式的<strong>开放封闭原则, 对扩展开放, 对修改封闭</strong> 而我们添加其他判断逻辑则是在修改它.</p>
<p>所以我们需要一个更加合理的方式来处理</p>
<h2 id="抽象工厂模式"><a href="#抽象工厂模式" class="headerlink" title="抽象工厂模式"></a>抽象工厂模式</h2><p>由于抽象最初源于 Java 等强类型静态语言, 在设计初期, 往往就需要关注类型解耦. 而 JavaScript 是一个动态类型的语言, 天然具有多态性, 但目前的 JavaScript 语法里，不支持抽象类的直接实现, 所以我们只能模拟抽象类.</p>
<h2 id="实现一个生产手机的抽象工厂"><a href="#实现一个生产手机的抽象工厂" class="headerlink" title="实现一个生产手机的抽象工厂"></a>实现一个生产手机的抽象工厂</h2><p>一个手机生产线</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 抽象工厂-只对类抽象的对象基本组成进行约束</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PhoneFactory</span> </span>&#123;</span><br><span class="line">  createOs() &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'抽象工厂创建软件系统方法, 需要重写'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  createHardware() &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'抽象工厂创建硬件方法, 需要重写'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 具体工厂-实现具体功能</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FakeStarFactory</span> <span class="keyword">extends</span> <span class="title">PhoneFactory</span> </span>&#123;</span><br><span class="line">  createOs() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> IOS()</span><br><span class="line">  &#125;</span><br><span class="line">  createHardware() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> MI()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>抽象出系统部分的抽象工厂</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 抽象手机系统工厂</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OS</span> </span>&#123;</span><br><span class="line">  run() &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'抽象工厂, 不允许直接调用'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 具体运行系统工厂</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Ios</span> <span class="keyword">extends</span> <span class="title">OS</span> </span>&#123;</span><br><span class="line">  run() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'用ios系统方式启动'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Android</span> <span class="keyword">extends</span> <span class="title">OS</span> </span>&#123;</span><br><span class="line">  run() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'用安卓系统启动'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>抽象出硬件的抽象工厂</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 抽象硬件类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Hardware</span> </span>&#123;</span><br><span class="line">  operating() &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'抽象工厂方法, 不允许直接调用'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 具体工厂</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MI</span> <span class="keyword">extends</span> <span class="title">Hardware</span> </span>&#123;</span><br><span class="line">  operating() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'使用小米硬件'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HUAWEI</span> <span class="keyword">extends</span> <span class="title">Hardware</span> </span>&#123;</span><br><span class="line">  operating() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'使用华为硬件'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>开始生产手机</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> phone = <span class="keyword">new</span> FakeStarFactory() <span class="comment">// 生产手机</span></span><br><span class="line"><span class="keyword">const</span> phoneOs = phone.createOs() <span class="comment">// 加上系统</span></span><br><span class="line"><span class="keyword">const</span> phonrHardware = phone.createHardware() <span class="comment">// 加上硬件</span></span><br><span class="line">phonrHardware.operating() <span class="comment">// 选择硬件</span></span><br><span class="line">phoneOs.run() <span class="comment">// 运行系统</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>简单工厂模式</title>
    <url>/2020/01/22/%E7%AE%80%E5%8D%95%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<ul>
<li>构造器模式</li>
<li>简单工厂模式</li>
</ul>
<h2 id="构造器模式-抽象每个对象的变与不变"><a href="#构造器模式-抽象每个对象的变与不变" class="headerlink" title="构造器模式-抽象每个对象的变与不变"></a>构造器模式-抽象每个对象的变与不变</h2><p>你正在开发一个学生管理系统, 开发时只有自己, 于是创建自己的用户信息:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 字面量</span></span><br><span class="line"><span class="keyword">const</span> zhangsan = &#123;</span><br><span class="line">  name: <span class="string">'张三'</span>,</span><br><span class="line">  age: <span class="number">22</span>,</span><br><span class="line">  gender: <span class="number">0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>过了两天, 你的同事过来说让你加上他的用户信息, 他要使用用户信息, 于是你:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 字面量</span></span><br><span class="line"><span class="keyword">const</span> zhangsan = &#123;</span><br><span class="line">  name: <span class="string">'张三'</span>,</span><br><span class="line">  age: <span class="number">22</span>,</span><br><span class="line">  gender: <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> lisi = &#123;</span><br><span class="line">  name: <span class="string">'李四'</span>,</span><br><span class="line">  age: <span class="number">20</span>,</span><br><span class="line">  gender: <span class="number">1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>过了两个星期,产品经理跟你说, 我这里有一点点(1000 个)测试数据, 你给我录入下, 于是你写了个构造函数(构造器)</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 构造器</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Students</span>(<span class="params">name, age, gender</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = name</span><br><span class="line">  <span class="keyword">this</span>.age = age</span><br><span class="line">  <span class="keyword">this</span>.gender = genger</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// ... 此处省略读取数据, 遍历调用构造器</span></span><br><span class="line"><span class="keyword">const</span> student = <span class="keyword">new</span> Students(name, age, gender)</span><br></pre></td></tr></table></figure>

<h3 id="思考-变与不变"><a href="#思考-变与不变" class="headerlink" title="思考 变与不变"></a>思考 变与不变</h3><p>不变的是每个学生都有姓名、年龄、性别三个属性,这叫<strong>共性</strong><br>变化的是三个属性的值,这叫<strong>个性</strong></p>
<blockquote>
<p>案例中构造器在整个过程中就是抽象了学生这个对象, 将赋值的过程进行了封装, 确定不变的部分, 使每个学生对象都有自己的姓名、年龄、性别三个属性, 在确保不变的同时, 将变化的三个属性的值进行开放, 由用户自己传入, 保证了个性的灵活度</p>
</blockquote>
<h2 id="工厂模式-抽象不同构造器之间的变与不变"><a href="#工厂模式-抽象不同构造器之间的变与不变" class="headerlink" title="工厂模式-抽象不同构造器之间的变与不变"></a>工厂模式-抽象不同构造器之间的变与不变</h2><p>第一期交付后一个月, 学校方面打来电话, 表示要对学生中的班干部进行区分, 备注班干部职责, 于是你加了一个班干部的构造器用来生成班干部的信息,</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Students</span>(<span class="params">name, age, gender</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 普通学生</span></span><br><span class="line">  <span class="keyword">this</span>.name = name</span><br><span class="line">  <span class="keyword">this</span>.age = age</span><br><span class="line">  <span class="keyword">this</span>.gender = genger</span><br><span class="line">  <span class="keyword">this</span>.identity = <span class="string">'student'</span></span><br><span class="line">  <span class="keyword">this</span>.duties = [<span class="string">'学习'</span>]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Cadres</span>(<span class="params">name, age, gender</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 班干部</span></span><br><span class="line">  <span class="keyword">this</span>.name = name</span><br><span class="line">  <span class="keyword">this</span>.age = age</span><br><span class="line">  <span class="keyword">this</span>.gender = genger</span><br><span class="line">  <span class="keyword">this</span>.identity = <span class="string">'cadre'</span></span><br><span class="line">  <span class="keyword">this</span>.duties = [<span class="string">'点名'</span>,<span class="string">'出黑板报'</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这时候, 你发现又出现了 <strong>变数</strong> identity, 你还需要一个方法来判断调用哪一个构造器</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Factory</span>(<span class="params">name, age, gender, identity</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">switch</span>(identity) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'student'</span>:</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> Students(name, age, gender)</span><br><span class="line">      <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">case</span> <span class="string">'cadre'</span>:</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> Cadres(name, age, gender)</span><br><span class="line">      <span class="keyword">break</span></span><br><span class="line">    <span class="comment">// 此处省略无数个班干部</span></span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">      <span class="keyword">break</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>写完后, 你发现每类班干部职责实在太多了, 难道要写几十个构造器么</p>
<h3 id="重新思考-变与不变"><a href="#重新思考-变与不变" class="headerlink" title="重新思考 变与不变"></a>重新思考 变与不变</h3><p>在我们的学生与班干部两个构造器中, 都拥有不变的姓名、年龄、性别三个共性, 变化是的身份与职责, 由此可以看出我们的问题, 共性封装不够、共性与个性分离不彻底, 于是我们重新封装下:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Student</span>(<span class="params">name, age, gender, identity, duties</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = name</span><br><span class="line">  <span class="keyword">this</span>.age = age</span><br><span class="line">  <span class="keyword">this</span>.gender = gender</span><br><span class="line">  <span class="keyword">this</span>.identity = identity</span><br><span class="line">  <span class="keyword">this</span>.duties = duties</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Factory</span>(<span class="params">name, age, gender, identity</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> duties</span><br><span class="line">  <span class="keyword">switch</span>(identity)&#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'student'</span>:</span><br><span class="line">      duties = [<span class="string">'学习'</span>,<span class="string">'做作业'</span>]</span><br><span class="line">      <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">case</span> <span class="string">'cadre'</span>:</span><br><span class="line">      duties = [<span class="string">'组织活动'</span>,<span class="string">'点名'</span>]</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">      <span class="keyword">break</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> Student(name, age, gender, identity, duties)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<pre><code>工厂模式就是对创建对象的过程进行封装, 我们不需要在关心封装内做的事情,只需要拿到工厂交付给我们的结果即可.</code></pre>]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>设计模式概况</title>
    <url>/2020/01/22/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E6%A6%82%E5%86%B5/</url>
    <content><![CDATA[<h2 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h2><blockquote>
<p>软件设计模式（Design pattern），又称设计模式，是一套被反复使用、多数人知晓的、经过分类编目的、代码设计经验的总结。使用设计模式是为了可重用代码、让代码更容易被他人理解、保证代码可靠性、程序的重用性。</p>
</blockquote>
<blockquote>
<p>设计模式是一套现成的工具, 拿来即可用. 就像电饭锅、洗衣机, 不用关心电饭锅、洗衣机的制作原理, 只需将需要的特定事物放入, 即可得到想要的结果.</p>
</blockquote>
<h2 id="JavaScript-主要设计原则–面向对象编程和面向对象设计"><a href="#JavaScript-主要设计原则–面向对象编程和面向对象设计" class="headerlink" title="JavaScript 主要设计原则–面向对象编程和面向对象设计"></a>JavaScript 主要设计原则–面向对象编程和面向对象设计</h2><ul>
<li>单一功能原则</li>
<li>开放封闭原则</li>
</ul>
<h2 id="核心思想–封装变化"><a href="#核心思想–封装变化" class="headerlink" title="核心思想–封装变化"></a>核心思想–封装变化</h2><p>一个简单的产品流程节点可以分为:</p>
<pre><code>想法 -&gt; 需求 -&gt; 设计 -&gt; 开发 -&gt; 测试 -&gt; 部署 -&gt; 产品</code></pre><p>&nbsp;&nbsp;通过上面的关键节点可以看出, 影响一个产品的复杂程度的主要节点是需求与设计, 在抛开个人能力不谈的时候, 设计的复杂程度取决于需求的复杂程度, 所以我们可以说需求是一个产品复杂程度的”罪魁祸首”, 而需求对于开发人员来说, 往往就是<strong>变化</strong></p>
<p>在实际开发过中, 我们需要做的就是将变化造成的影响 <strong>最小化</strong>.</p>
<pre><code>-- 将变与不变分离, 保证变化部分的灵活性, 保证不变部分的稳定性.</code></pre>]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>js数组与函数</title>
    <url>/2020/01/06/js%E6%95%B0%E7%BB%84%E4%B8%8E%E5%87%BD%E6%95%B0-1/</url>
    <content><![CDATA[<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">知识点 - 数组 - 函数 - 作用域 - 作用域链</span><br></pre></td></tr></table></figure>

<h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 数组:一组有序的数据</span></span><br><span class="line"><span class="comment">// 数组的作用:可以一次性储存多个数据</span></span><br><span class="line"><span class="comment">// 数组元素:数组中存储的每个数据,都可以叫数组的元素,比如:存储了3个数据,数组中3个元素</span></span><br><span class="line"><span class="comment">// 数组长度:就是数组的元素的个数,比如有3个元素,就说,这个数组的长度是3</span></span><br><span class="line"><span class="comment">// 数组索引(下标):用来存储或者访问数组中的数据的,索引从0开始,到长度减1结束</span></span><br><span class="line"><span class="comment">// 数组的索引和数组的长度的关系:长度减1就是最大的索引值</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 1、构造函数创建数组</span></span><br><span class="line"><span class="keyword">var</span> arr = <span class="keyword">new</span> <span class="built_in">Array</span>()   <span class="comment">// 定义了一个叫arr的空数组</span></span><br><span class="line"><span class="keyword">var</span> arr = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">10</span>)  <span class="comment">// 定义了一个长度为10的数组，数组中每个数据为undefiend</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2、字面量方式创建数组</span></span><br><span class="line"><span class="keyword">var</span> arr = []  <span class="comment">// 创建了一个空数组</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]  <span class="comment">// 创建了一个数组并赋值</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取数组中所有值</span></span><br><span class="line"><span class="built_in">console</span>.Log(arr)  <span class="comment">// 打印数组与值</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;arr.length; i++)&#123; <span class="comment">// 循环遍历获取数组中所有元素</span></span><br><span class="line">    <span class="built_in">console</span>.log(arr[i])</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 设置数组的值</span></span><br><span class="line">arr[<span class="number">1</span>] = <span class="number">100</span>  <span class="comment">// 设置数组中下标为1的元素为100</span></span><br><span class="line"><span class="comment">// 获取数组中某个位置的值</span></span><br><span class="line"><span class="keyword">var</span> result = arr[<span class="number">1</span>]  <span class="comment">// 获取数组中下标为1的元素</span></span><br><span class="line"><span class="comment">// 获取数组的长度</span></span><br><span class="line"><span class="built_in">console</span>.log(arr.length）  <span class="comment">// 打印arr数组的长度</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 总结数组</span></span><br><span class="line"><span class="comment">// 数组:存储一组有序的数据</span></span><br><span class="line"><span class="comment">// 数组的作用:一次性存储多个数据</span></span><br><span class="line"><span class="comment">// 数组的定义方式:</span></span><br><span class="line"><span class="comment">// 1.构造函数定义数组: var 数组名=new Array();</span></span><br><span class="line"><span class="comment">// 2.字面量方式定义数组: var 数组名=[];</span></span><br><span class="line"><span class="comment">// var 数组名=new Array();空数组</span></span><br><span class="line"><span class="comment">// var 数组名=new Array(值);数组定义了,有长度</span></span><br><span class="line"><span class="comment">// var 数组名=new Array(值1,值2,值3....);定义数组并且有多个数据</span></span><br><span class="line"><span class="comment">// var 数组名=[];空数组</span></span><br><span class="line"><span class="comment">// var 数组名=[值1,值2,值3];有三个数据</span></span><br><span class="line"><span class="comment">// 数组元素:就是数组中存储的数据</span></span><br><span class="line"><span class="comment">// 数组长度:就是数组中元素的个数</span></span><br><span class="line"><span class="comment">// 数组索引(下标):从0开始,到数组的长度减1结束</span></span><br><span class="line"><span class="comment">// 通过下标设置数组的元素值: 数组名[索引]=值</span></span><br><span class="line"><span class="comment">// 通过下标访问数组的元素值: 数组名[索引]</span></span><br></pre></td></tr></table></figure>

<h3 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 把数据按照一定的顺序排列(从小到大或从大到小)</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">8</span>]</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.length - <span class="number">1</span>; i++) &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; arr.length - <span class="number">1</span> - i; j++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (arr[j] &gt; arr[j + <span class="number">1</span>]) &#123;</span><br><span class="line">      <span class="keyword">var</span> tmp = arr[j]</span><br><span class="line">      arr[j] = arr[j + <span class="number">1</span>]</span><br><span class="line">      arr[j + <span class="number">1</span>] = tmp</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 函数：把重复的代码进行封装，在需要的时候直接调用函数即可。</span></span><br><span class="line"><span class="comment">// 函数作用：代码的重用(重复使用)</span></span><br><span class="line"><span class="comment">// 函数也是一种数据类型 --&gt; function 类型</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 命名函数(有名字的函数叫命名函数)</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params"></span>)</span>&#123;  <span class="comment">// 使用function关键字定义了一个叫fn的函数 --&gt; 函数声明</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'函数体--&gt;重复的代码'</span>)</span><br><span class="line">&#125;</span><br><span class="line">f1() <span class="comment">// 函数的调用--&gt;执行函数体中的代码</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 匿名函数(函数如果没名字，就是匿名函数)</span></span><br><span class="line"><span class="keyword">var</span> f2 = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; <span class="comment">// 函数表达式</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'匿名函数'</span>)</span><br><span class="line">&#125;</span><br><span class="line">f2() <span class="comment">// 匿名函数的调用</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数的自调用</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'函数的自调用'</span>)</span><br><span class="line">&#125;)()； <span class="comment">// 函数声明的同时就调用</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 回调函数</span></span><br><span class="line"><span class="comment">// 如果一个函数作为参数，那么这个参数(函数)，可以叫做回调函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f2</span>(<span class="params">fn</span>)</span>&#123;</span><br><span class="line">    fn()</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f3</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'f3'</span>)</span><br><span class="line">&#125;</span><br><span class="line">f2(f3) <span class="comment">// 将 f3 函数作为参数传入 f2 函数，在 f2 函数内部执行 f3 函数</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 形参与实参</span></span><br><span class="line"><span class="comment">// 函数在定义时，函数名后面的小括号里面的变量叫形参</span></span><br><span class="line"><span class="comment">// 函数在调用时，函数名后面的小括号里面的变量或值叫实参</span></span><br><span class="line"><span class="comment">// 函数返回值，在函数内部有return关键字,并且在关键字后面有内容,这个内容被返回了</span></span><br><span class="line"><span class="comment">// 例子</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">num1, num2</span>)</span>&#123; <span class="comment">// 形参</span></span><br><span class="line">    <span class="keyword">var</span> sum = num1 + num2</span><br><span class="line">    <span class="built_in">console</span>.log(sum)  <span class="comment">// 打印结果 30</span></span><br><span class="line">    <span class="keyword">return</span> sum	<span class="comment">// return 关键字 函数的返回值</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> result = sum(<span class="number">10</span>, <span class="number">20</span>) <span class="comment">// (10,20)-&gt;实参 result-&gt;接受函数返回值</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// arguments对象伪数组</span></span><br><span class="line"><span class="comment">// 如果一个函数不确定用户是否传入了参数，或者不知道传入了几个参数，可以使用 arguments 进行处理</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">	<span class="comment">// arguments对象可以获取传入的每个参数的值</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">arguments</span>.length) <span class="comment">// 5</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;<span class="built_in">arguments</span>.length; i++)&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="built_in">arguments</span>[i]) <span class="comment">// 输出每个实参的值</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">fn(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 小结函数</span></span><br><span class="line"><span class="comment">// 如果一个函数中有return ,那么这个函数就有返回值</span></span><br><span class="line"><span class="comment">// 如果一个函数中没有return,那么这个函数就没有返回值</span></span><br><span class="line"><span class="comment">// 如果一个函数中没有明确的返回值,那么调用的时候接收了,结果就是undefined</span></span><br><span class="line"><span class="comment">// 没有明确返回值:函数中没有return,函数中有return,但是return后面没有任何内容</span></span><br><span class="line"><span class="comment">// 函数没有返回值,但是在调用的时候接收了,那么结果就是undefined</span></span><br><span class="line"><span class="comment">// 变量声明了,没有赋值,结果也是undefined</span></span><br><span class="line"><span class="comment">// 如果一个函数有参数,有参数的函数</span></span><br><span class="line"><span class="comment">// 如果一个函数没有参数,没有参数的函数</span></span><br><span class="line"><span class="comment">// 形参的个数和实参的个数可以不一致</span></span><br><span class="line"><span class="comment">// return 下面的代码是不会执行的</span></span><br></pre></td></tr></table></figure>

<h3 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 作用域：使用范围</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 全局变量：在函数外部使用 var 关键字定义的变量。</span></span><br><span class="line"><span class="comment">// 局部变量：在函数内部定义的变量是局部变量，外面不能使用。</span></span><br><span class="line"><span class="comment">// 隐式全局变量：在函数内部没有使用 var 定义的变量</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 全局作用域：全局变量的使用范围</span></span><br><span class="line"><span class="comment">// 局部作用域：局部变量的使用范围</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 示例</span></span><br><span class="line"><span class="keyword">var</span> num1 = <span class="number">100</span> <span class="comment">// 全局变量</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">num</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> num2 = <span class="number">200</span> <span class="comment">// 局部变量</span></span><br><span class="line">  num3 = <span class="number">300</span> <span class="comment">// 隐式全局变量</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(num1) <span class="comment">// 100</span></span><br><span class="line"><span class="built_in">console</span>.log(num2) <span class="comment">// undefiend</span></span><br><span class="line"><span class="built_in">console</span>.log(num3) <span class="comment">// 300</span></span><br></pre></td></tr></table></figure>

<h3 id="作用域链"><a href="#作用域链" class="headerlink" title="作用域链"></a>作用域链</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> num = <span class="number">10</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">f2</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">f3</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(num)</span><br><span class="line">    &#125;</span><br><span class="line">    f3()</span><br><span class="line">  &#125;</span><br><span class="line">  f2()</span><br><span class="line">&#125;</span><br><span class="line">f1() <span class="comment">// 打印输出 10 一层一层往上寻找 num 的值</span></span><br></pre></td></tr></table></figure>

<h3 id="预解析-变量-函数-提升"><a href="#预解析-变量-函数-提升" class="headerlink" title="预解析(变量(函数)提升)"></a>预解析(变量(函数)提升)</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 预解析:提前解析代码，提升变量的声明与函数的声明</span></span><br><span class="line"><span class="comment">// 预解析做什么事?</span></span><br><span class="line"><span class="comment">// 把变量的声明提前了----提前到当前所在的作用域的最上面</span></span><br><span class="line"><span class="comment">// 函数的声明也会被提前---提前到当前所在的作用域的最上面</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(num) <span class="comment">// 打印 undefined 不报错</span></span><br><span class="line"><span class="keyword">var</span> num = <span class="number">10</span></span><br><span class="line"></span><br><span class="line">f1() <span class="comment">// 打印 '函数预解析'</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'函数预解析'</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> num1 = <span class="number">100</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// var num1 等价于增加了此行代码</span></span><br><span class="line">  <span class="built_in">console</span>.log(num1) <span class="comment">// 变量提升到了作用域最上面 --&gt; 输出 undefined</span></span><br><span class="line">  <span class="keyword">var</span> num1 = <span class="number">200</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 预解析小结</span></span><br><span class="line"><span class="comment">// 预解析中,变量的提升,只会在当前的作用域中提升,提前到当前的作用域的最上面</span></span><br><span class="line"><span class="comment">// 函数中的变量只会提前到函数的作用域中的最前面,不会出去</span></span><br><span class="line"><span class="comment">// 预解析会分段(多对的script标签中函数重名,预解析的时候不会冲突)</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>js数组与函数</title>
    <url>/2020/01/04/js%E6%95%B0%E7%BB%84%E4%B8%8E%E5%87%BD%E6%95%B0/</url>
    <content><![CDATA[<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">知识点: -分支 - 循环</span><br></pre></td></tr></table></figure>

<h3 id="流程控制"><a href="#流程控制" class="headerlink" title="流程控制"></a>流程控制</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 流程控制：控制代码的执行过程</span></span><br><span class="line"><span class="comment">// 1、顺序结构:从上到下，从左到右执行的顺序，就是顺序结构（不严谨）</span></span><br><span class="line"><span class="comment">// 2、分支结构：if语句、if-else语句、switch-case语句</span></span><br><span class="line"><span class="comment">// 3、循环结构：while循环、do-while循环、for循环、for-in循环</span></span><br></pre></td></tr></table></figure>

<h3 id="分支语句-主要用于判断"><a href="#分支语句-主要用于判断" class="headerlink" title="分支语句-主要用于判断"></a>分支语句-主要用于判断</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// if语句-（如果）</span></span><br><span class="line"><span class="comment">// 语法：</span></span><br><span class="line"><span class="keyword">if</span> (<span class="number">1</span> &lt; <span class="number">3</span>) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'1是小于3的'</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 执行过程：</span></span><br><span class="line"><span class="comment">// 先判断表达式结果是否成立（true/false），如果是true则执行代码块，如果是false，大括号中的代码不执行</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// if-else语句-(如果，否则)</span></span><br><span class="line"><span class="comment">// 语法：</span></span><br><span class="line"><span class="keyword">if</span> (<span class="number">1</span> &lt; <span class="number">3</span>) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'1小于3'</span>) <span class="comment">// 代码1</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'1大于3'</span>) <span class="comment">// 代码2</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 执行过程：</span></span><br><span class="line"><span class="comment">// 如果表达式结果成立（true/false）,这执行代码1，如果表达式结果是false，这执行代码2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 三元表达式</span></span><br><span class="line"><span class="comment">// 语法</span></span><br><span class="line"><span class="keyword">var</span> result = <span class="number">1</span> &lt; <span class="number">3</span> ? <span class="string">'小于'</span> : <span class="string">'不小于'</span></span><br><span class="line"><span class="comment">// 执行过程：</span></span><br><span class="line"><span class="comment">// 表达式(1&lt;3)的结果是true还是false，如果是true，则result = '小于'，如果是false，则result = '不小于'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// if-else if-else if-else</span></span><br><span class="line"><span class="comment">// 语法</span></span><br><span class="line"><span class="keyword">if</span> (表达式<span class="number">1</span>) &#123;</span><br><span class="line">  代码<span class="number">1</span></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (表达式<span class="number">2</span>) &#123;</span><br><span class="line">  代码<span class="number">2</span></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (表达式<span class="number">3</span>) &#123;</span><br><span class="line">  代码<span class="number">3</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  代码<span class="number">4</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 执行过程</span></span><br><span class="line"><span class="comment">// 先判断表达式1的结果，如果为true，则执行代码1，如果是false，再判断表达式2的结果，如果为true就执行代码2，如果是false再判断表达式3的结果，如果为true就执行代码3，如果上面表达式都是false，就执行代码4</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// switch-case语句</span></span><br><span class="line"><span class="comment">// 语法：</span></span><br><span class="line"><span class="keyword">switch</span> (表达式) &#123;</span><br><span class="line">  <span class="keyword">case</span> 值<span class="number">1</span>:</span><br><span class="line">    代码<span class="number">1</span></span><br><span class="line">    <span class="keyword">break</span></span><br><span class="line">  <span class="keyword">case</span> 值<span class="number">2</span>:</span><br><span class="line">    代码<span class="number">2</span></span><br><span class="line">    <span class="keyword">break</span></span><br><span class="line">  <span class="keyword">case</span> 值<span class="number">3</span>:</span><br><span class="line">    代码<span class="number">3</span></span><br><span class="line">    <span class="keyword">break</span></span><br><span class="line">  <span class="keyword">default</span>:</span><br><span class="line">    代码<span class="number">4</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 执行过程</span></span><br><span class="line"><span class="comment">// 获取表达式的值，和值1比较，如果一样，就执行代码1，遇到break，跳出整个语句。后面代码不执行，</span></span><br><span class="line"><span class="comment">// 如果和值1不一样，就和值2比较，然后执行代码2，遇到break，跳出整个语句，后面代码不执行。</span></span><br><span class="line"><span class="comment">// 以此类推。。。</span></span><br><span class="line"><span class="comment">// 如果都不一样，执行代码4</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 总结分支语句</span></span><br><span class="line"><span class="comment">// if语句:一个分支</span></span><br><span class="line"><span class="comment">// if-else语句:两个分支,最终只执行一个分支</span></span><br><span class="line"><span class="comment">// if-else if-else if...语句: 多个分支,也是只会执行一个</span></span><br><span class="line"><span class="comment">// switch-case语句:多分支语句,最终也会一个(必须要有break)</span></span><br><span class="line"><span class="comment">// 三元表达式:和if-else语句是一样的</span></span><br><span class="line"><span class="comment">// 什么时候使用if-else if...: 一般是对范围的判断</span></span><br><span class="line"><span class="comment">// 什么时候使用switch-case语句:一般是对具体的值的判断</span></span><br><span class="line"><span class="comment">// 如果有多个分支,是针对范围的判断一般选择if-else if的语句</span></span><br><span class="line"><span class="comment">// 如果有多个分支,是针对具体的值判断,一般选择用switch-case语句</span></span><br></pre></td></tr></table></figure>

<h3 id="循环语句"><a href="#循环语句" class="headerlink" title="循环语句"></a>循环语句</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 循环：一件事不停的或反复的去做</span></span><br><span class="line"><span class="comment">// 循环要有结束的条件，循环还应该有记录循环次数的计数器</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// while循环</span></span><br><span class="line"><span class="comment">// 语法：</span></span><br><span class="line"><span class="keyword">var</span> num = <span class="number">0</span> <span class="comment">// 计数器</span></span><br><span class="line"><span class="keyword">while</span> (num &lt;= <span class="number">5</span>) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'循环体'</span>)</span><br><span class="line">  num++</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 执行过程</span></span><br><span class="line"><span class="comment">// 先判断条件是否成立，如果为true，那么执行循环体中的代码，计数器加一，再继续判断条件是否成立，如果为true，那么继续执行循环体中的代码，计数器继续加一，再判断循环条件，直到循环条件不成立，循环结束。</span></span><br><span class="line"><span class="comment">// 如果循环的条件一直为true，那么循环体中代码会一直执行，这种称为死循环。我们应该尽量避免死循环。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// do-while循环</span></span><br><span class="line"><span class="comment">// 语法：</span></span><br><span class="line"><span class="keyword">var</span> num = <span class="number">1</span></span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'循环体'</span>)</span><br><span class="line">&#125; <span class="keyword">while</span> (num &lt;= <span class="number">5</span>) <span class="comment">// 条件</span></span><br><span class="line"><span class="comment">// 执行过程：</span></span><br><span class="line"><span class="comment">// 先执行一次循环体，然后判断条件是否成立，不成立就跳出循环，成立就执行循环体，然后再判断。。以此类推。。直到条件不成立，跳出循环。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// while循环特点:先判断,后循环,有可能一次循环体都不执行</span></span><br><span class="line"><span class="comment">// do-while循环特点:先循环,后判断,至少执行一次循环体</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// for循环</span></span><br><span class="line"><span class="comment">// 语法：</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">  <span class="comment">// 表达式1、2、3</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'循环体'</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 执行过程</span></span><br><span class="line"><span class="comment">// 先执行一次表达式1，然后判断表达式2，如果不成立，就跳出循环，如果成立，就执行循环体的代码，执行完毕后跳到表达式3，然后跳到表达式2，判断表达式2是否成立。。以此类推。。直到表达式2不成立后跳出循环</span></span><br></pre></td></tr></table></figure>

<h3 id="break-与-continue"><a href="#break-与-continue" class="headerlink" title="break 与 continue"></a>break 与 continue</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//break关键字:如果在循环中使用,遇到了break,则立刻跳出当前所在的循环</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">  <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'哈哈'</span>)</span><br><span class="line">    <span class="keyword">break</span> <span class="comment">// 遇到break 跳出循环</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//continue:在循环中如果遇到continue关键字,直接开始下一次循环</span></span><br><span class="line"><span class="comment">//案例:求100-200之间所有的奇数的和</span></span><br><span class="line"><span class="keyword">var</span> sum = <span class="number">0</span></span><br><span class="line"><span class="keyword">var</span> i = <span class="number">100</span></span><br><span class="line"><span class="keyword">while</span> (i &lt;= <span class="number">200</span>) &#123;</span><br><span class="line">  <span class="comment">//判断是不是偶数</span></span><br><span class="line">  <span class="keyword">if</span> (i % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="comment">//如果是偶数-----&gt;跳过这个数字</span></span><br><span class="line">    i++ <span class="comment">//102</span></span><br><span class="line">    <span class="keyword">continue</span></span><br><span class="line">  &#125;</span><br><span class="line">  sum += i</span><br><span class="line">  i++</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(sum)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>js分支与循环</title>
    <url>/2020/01/03/js%E5%88%86%E6%94%AF%E4%B8%8E%E5%BE%AA%E7%8E%AF/</url>
    <content><![CDATA[<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">知识点: -分支 - 循环</span><br></pre></td></tr></table></figure>

<h3 id="流程控制"><a href="#流程控制" class="headerlink" title="流程控制"></a>流程控制</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 流程控制：控制代码的执行过程</span></span><br><span class="line"><span class="comment">// 1、顺序结构:从上到下，从左到右执行的顺序，就是顺序结构（不严谨）</span></span><br><span class="line"><span class="comment">// 2、分支结构：if语句、if-else语句、switch-case语句</span></span><br><span class="line"><span class="comment">// 3、循环结构：while循环、do-while循环、for循环、for-in循环</span></span><br></pre></td></tr></table></figure>

<h3 id="分支语句-主要用于判断"><a href="#分支语句-主要用于判断" class="headerlink" title="分支语句-主要用于判断"></a>分支语句-主要用于判断</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// if语句-（如果）</span></span><br><span class="line"><span class="comment">// 语法：</span></span><br><span class="line"><span class="keyword">if</span> (<span class="number">1</span> &lt; <span class="number">3</span>) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'1是小于3的'</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 执行过程：</span></span><br><span class="line"><span class="comment">// 先判断表达式结果是否成立（true/false），如果是true则执行代码块，如果是false，大括号中的代码不执行</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// if-else语句-(如果，否则)</span></span><br><span class="line"><span class="comment">// 语法：</span></span><br><span class="line"><span class="keyword">if</span> (<span class="number">1</span> &lt; <span class="number">3</span>) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'1小于3'</span>) <span class="comment">// 代码1</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'1大于3'</span>) <span class="comment">// 代码2</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 执行过程：</span></span><br><span class="line"><span class="comment">// 如果表达式结果成立（true/false）,这执行代码1，如果表达式结果是false，这执行代码2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 三元表达式</span></span><br><span class="line"><span class="comment">// 语法</span></span><br><span class="line"><span class="keyword">var</span> result = <span class="number">1</span> &lt; <span class="number">3</span> ? <span class="string">'小于'</span> : <span class="string">'不小于'</span></span><br><span class="line"><span class="comment">// 执行过程：</span></span><br><span class="line"><span class="comment">// 表达式(1&lt;3)的结果是true还是false，如果是true，则result = '小于'，如果是false，则result = '不小于'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// if-else if-else if-else</span></span><br><span class="line"><span class="comment">// 语法</span></span><br><span class="line"><span class="keyword">if</span> (表达式<span class="number">1</span>) &#123;</span><br><span class="line">  代码<span class="number">1</span></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (表达式<span class="number">2</span>) &#123;</span><br><span class="line">  代码<span class="number">2</span></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (表达式<span class="number">3</span>) &#123;</span><br><span class="line">  代码<span class="number">3</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  代码<span class="number">4</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 执行过程</span></span><br><span class="line"><span class="comment">// 先判断表达式1的结果，如果为true，则执行代码1，如果是false，再判断表达式2的结果，如果为true就执行代码2，如果是false再判断表达式3的结果，如果为true就执行代码3，如果上面表达式都是false，就执行代码4</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// switch-case语句</span></span><br><span class="line"><span class="comment">// 语法：</span></span><br><span class="line"><span class="keyword">switch</span> (表达式) &#123;</span><br><span class="line">  <span class="keyword">case</span> 值<span class="number">1</span>:</span><br><span class="line">    代码<span class="number">1</span></span><br><span class="line">    <span class="keyword">break</span></span><br><span class="line">  <span class="keyword">case</span> 值<span class="number">2</span>:</span><br><span class="line">    代码<span class="number">2</span></span><br><span class="line">    <span class="keyword">break</span></span><br><span class="line">  <span class="keyword">case</span> 值<span class="number">3</span>:</span><br><span class="line">    代码<span class="number">3</span></span><br><span class="line">    <span class="keyword">break</span></span><br><span class="line">  <span class="keyword">default</span>:</span><br><span class="line">    代码<span class="number">4</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 执行过程</span></span><br><span class="line"><span class="comment">// 获取表达式的值，和值1比较，如果一样，就执行代码1，遇到break，跳出整个语句。后面代码不执行，</span></span><br><span class="line"><span class="comment">// 如果和值1不一样，就和值2比较，然后执行代码2，遇到break，跳出整个语句，后面代码不执行。</span></span><br><span class="line"><span class="comment">// 以此类推。。。</span></span><br><span class="line"><span class="comment">// 如果都不一样，执行代码4</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 总结分支语句</span></span><br><span class="line"><span class="comment">// if语句:一个分支</span></span><br><span class="line"><span class="comment">// if-else语句:两个分支,最终只执行一个分支</span></span><br><span class="line"><span class="comment">// if-else if-else if...语句: 多个分支,也是只会执行一个</span></span><br><span class="line"><span class="comment">// switch-case语句:多分支语句,最终也会一个(必须要有break)</span></span><br><span class="line"><span class="comment">// 三元表达式:和if-else语句是一样的</span></span><br><span class="line"><span class="comment">// 什么时候使用if-else if...: 一般是对范围的判断</span></span><br><span class="line"><span class="comment">// 什么时候使用switch-case语句:一般是对具体的值的判断</span></span><br><span class="line"><span class="comment">// 如果有多个分支,是针对范围的判断一般选择if-else if的语句</span></span><br><span class="line"><span class="comment">// 如果有多个分支,是针对具体的值判断,一般选择用switch-case语句</span></span><br></pre></td></tr></table></figure>

<h3 id="循环语句"><a href="#循环语句" class="headerlink" title="循环语句"></a>循环语句</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 循环：一件事不停的或反复的去做</span></span><br><span class="line"><span class="comment">// 循环要有结束的条件，循环还应该有记录循环次数的计数器</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// while循环</span></span><br><span class="line"><span class="comment">// 语法：</span></span><br><span class="line"><span class="keyword">var</span> num = <span class="number">0</span> <span class="comment">// 计数器</span></span><br><span class="line"><span class="keyword">while</span> (num &lt;= <span class="number">5</span>) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'循环体'</span>)</span><br><span class="line">  num++</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 执行过程</span></span><br><span class="line"><span class="comment">// 先判断条件是否成立，如果为true，那么执行循环体中的代码，计数器加一，再继续判断条件是否成立，如果为true，那么继续执行循环体中的代码，计数器继续加一，再判断循环条件，直到循环条件不成立，循环结束。</span></span><br><span class="line"><span class="comment">// 如果循环的条件一直为true，那么循环体中代码会一直执行，这种称为死循环。我们应该尽量避免死循环。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// do-while循环</span></span><br><span class="line"><span class="comment">// 语法：</span></span><br><span class="line"><span class="keyword">var</span> num = <span class="number">1</span></span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'循环体'</span>)</span><br><span class="line">&#125; <span class="keyword">while</span> (num &lt;= <span class="number">5</span>) <span class="comment">// 条件</span></span><br><span class="line"><span class="comment">// 执行过程：</span></span><br><span class="line"><span class="comment">// 先执行一次循环体，然后判断条件是否成立，不成立就跳出循环，成立就执行循环体，然后再判断。。以此类推。。直到条件不成立，跳出循环。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// while循环特点:先判断,后循环,有可能一次循环体都不执行</span></span><br><span class="line"><span class="comment">// do-while循环特点:先循环,后判断,至少执行一次循环体</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// for循环</span></span><br><span class="line"><span class="comment">// 语法：</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">  <span class="comment">// 表达式1、2、3</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'循环体'</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 执行过程</span></span><br><span class="line"><span class="comment">// 先执行一次表达式1，然后判断表达式2，如果不成立，就跳出循环，如果成立，就执行循环体的代码，执行完毕后跳到表达式3，然后跳到表达式2，判断表达式2是否成立。。以此类推。。直到表达式2不成立后跳出循环</span></span><br></pre></td></tr></table></figure>

<h3 id="break-与-continue"><a href="#break-与-continue" class="headerlink" title="break 与 continue"></a>break 与 continue</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//break关键字:如果在循环中使用,遇到了break,则立刻跳出当前所在的循环</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">  <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'哈哈'</span>)</span><br><span class="line">    <span class="keyword">break</span> <span class="comment">// 遇到break 跳出循环</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//continue:在循环中如果遇到continue关键字,直接开始下一次循环</span></span><br><span class="line"><span class="comment">//案例:求100-200之间所有的奇数的和</span></span><br><span class="line"><span class="keyword">var</span> sum = <span class="number">0</span></span><br><span class="line"><span class="keyword">var</span> i = <span class="number">100</span></span><br><span class="line"><span class="keyword">while</span> (i &lt;= <span class="number">200</span>) &#123;</span><br><span class="line">  <span class="comment">//判断是不是偶数</span></span><br><span class="line">  <span class="keyword">if</span> (i % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="comment">//如果是偶数-----&gt;跳过这个数字</span></span><br><span class="line">    i++ <span class="comment">//102</span></span><br><span class="line">    <span class="keyword">continue</span></span><br><span class="line">  &#125;</span><br><span class="line">  sum += i</span><br><span class="line">  i++</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(sum)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>js基本语法</title>
    <url>/2020/01/02/js%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/</url>
    <content><![CDATA[<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">知识点:</span><br><span class="line">  - 变量</span><br><span class="line">  - 注释</span><br><span class="line">  - 数据类型</span><br><span class="line">  - 运算符</span><br></pre></td></tr></table></figure>

<h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><blockquote>
<p>变量—区分大小写</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 变量的作用: 用来操作数据的(可以存储,可以读取)</span></span><br><span class="line"><span class="keyword">var</span> admin <span class="comment">// 变量的声明-&gt;只声明,没有赋值</span></span><br><span class="line"><span class="keyword">var</span> name = <span class="string">'周杰伦'</span> <span class="comment">// 变量的初始化-&gt;声明并赋值</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 1.使用var关键字(variable:可变的量)</span></span><br><span class="line"><span class="keyword">var</span> uname <span class="comment">// undefined</span></span><br><span class="line">uname = <span class="string">'周杰伦'</span> <span class="comment">//赋值</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.声明变量即赋值(推荐)</span></span><br><span class="line"><span class="keyword">var</span> unam = <span class="string">'周杰伦'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 3.声明多个变量</span></span><br><span class="line"><span class="keyword">var</span> unam = <span class="string">'周杰伦'</span>,</span><br><span class="line">  age = <span class="number">20</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>变量名的注意问题—变量名的命名规范,要遵循驼峰命名法</p>
</blockquote>
<pre><code>* 1.变量的名字要有意义,
* 2.变量名有一定的规范:一般以字母,$符号,下划线开头,中间或者后面可以有$符号,字母,数字
* 3.变量名一般都是小写的
* 4.变量名如果是多个单词,第一个单词的首字母是小写的,后面的所有的单词的首字母都是大写的,这种命名方式称为:驼峰命名法
* 5.不能使用关键字(系统自带的一些单词,不能使用)
* 6.不会单词用拼音,拼音也要遵循驼峰命名法</code></pre><h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//注释是解释代码的含义,浏览器不会对注释内容进行解析执行</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 单行注释</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 多行注释</span></span><br><span class="line"><span class="comment"> * 建议在代码关键处添加注释</span></span><br><span class="line"><span class="comment"> * 不写注释--&gt;写的时候只有你和上帝看的懂,写完之后你的代码只有上帝看得懂</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 另外一种多行注释</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>

<h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 原始数据类型(6种)</span></span><br><span class="line"><span class="keyword">var</span> num = <span class="number">10</span> <span class="comment">//number 数字类型(整数和小数)</span></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">'周杰伦'</span> <span class="comment">//string 字符串类型(一般用单引号或双引号包裹)</span></span><br><span class="line"><span class="keyword">var</span> flag = <span class="literal">true</span> <span class="comment">//boolean 布尔类型(值只有两个 true(真/1) false(假/0))</span></span><br><span class="line"><span class="keyword">var</span> nll = <span class="literal">null</span> <span class="comment">//null 空类型 值只有一个null 一个对象指向为空,可以赋值为null</span></span><br><span class="line"><span class="keyword">var</span> undef <span class="comment">//undefined 未定义值只有一个undefined(变量声明了,没有赋值 函数没有返回值)</span></span><br><span class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> <span class="built_in">Object</span>() <span class="comment">//object 对象</span></span><br><span class="line"></span><br><span class="line"><span class="literal">NaN</span> <span class="comment">// 特殊(not an number) undefined加数字会出现NaN</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取数据类型</span></span><br><span class="line"><span class="keyword">typeof</span> num <span class="comment">// number</span></span><br><span class="line"><span class="keyword">typeof</span> num <span class="comment">// number</span></span><br></pre></td></tr></table></figure>

<p>###　类型转行</p>
<blockquote>
<p>其他类型转数字类型</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 转整数</span></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="string">'10'</span>) <span class="comment">// 10 转整数</span></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="string">'12abc'</span>) <span class="comment">// 12</span></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="string">'1a1'</span>) <span class="comment">// 1 遇到非数字就停止</span></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="string">'abc12'</span>) <span class="comment">// NaN</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 转数字</span></span><br><span class="line"><span class="built_in">Number</span>(<span class="string">'10'</span>) <span class="comment">// 10</span></span><br><span class="line"><span class="built_in">Number</span>(<span class="string">'12abc'</span>) <span class="comment">// NaN</span></span><br><span class="line"><span class="built_in">Number</span>(<span class="string">'1.1'</span>) <span class="comment">// 1.1</span></span><br><span class="line"><span class="built_in">Number</span>(<span class="string">'abc12'</span>) <span class="comment">// NaN</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 转小数</span></span><br><span class="line"><span class="built_in">parseFloat</span>(<span class="string">'12'</span>) <span class="comment">// 10</span></span><br><span class="line"><span class="built_in">parseFloat</span>(<span class="string">'12.12'</span>) <span class="comment">// 12.12</span></span><br><span class="line"><span class="built_in">parseFloat</span>(<span class="string">'abc12'</span>) <span class="comment">// NaN</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>其他类型转字符串</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 如果变量有意义调用.tostring（）使用转换  // undefined(无意义)</span></span><br><span class="line"><span class="comment">// 如果变量没有意义使用string（）转换</span></span><br><span class="line"><span class="keyword">var</span> num = <span class="number">20</span></span><br><span class="line">num.toString() <span class="comment">// '20'</span></span><br><span class="line"><span class="built_in">String</span>(num) <span class="comment">// '20'</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>其他类型转布尔类型</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// console.log(Boolean(1)) //true</span></span><br><span class="line"><span class="comment">// console.log(Boolean(0)) //false</span></span><br><span class="line"><span class="comment">// console.log(Boolean(11)) //true</span></span><br><span class="line"><span class="comment">// console.log(Boolean(-10)) //true</span></span><br><span class="line"><span class="comment">// console.log(Boolean("哈哈")) //true</span></span><br><span class="line"><span class="comment">// console.log(Boolean("")) //false</span></span><br><span class="line"><span class="comment">// console.log(Boolean(null)) //false</span></span><br><span class="line"><span class="comment">// console.log(Boolean(undefined)) //false</span></span><br></pre></td></tr></table></figure>

<h3 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 算数运算符:  +  -  *  /  %</span></span><br><span class="line"><span class="comment">// 算数运算表达式:由算数运算符连接起来的表达式</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 一元运算符: 这个操作符只需要一个操作数就可以运算的符号  ++  --</span></span><br><span class="line"><span class="comment">// 二元运算符: 这个操作符需要两个操作数就可以运算,</span></span><br><span class="line"><span class="comment">// 三元运算符: 10 == 10 ? true:false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 复合运算符: +=  -=  *=  /=  %=</span></span><br><span class="line"><span class="comment">// 复合运算表达式:由复合运算符连接起来的表达式</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 关系运算符: &gt;  &lt;  &gt;=  &lt;=  ==不严格的 ===严格的 !=不严格的不等 !==严格的不等</span></span><br><span class="line"><span class="comment">// 关系运算表达式:由关系运算符连接起来的表达式</span></span><br><span class="line"><span class="comment">// 关系运算表达式的结果是布尔类型</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 逻辑运算符:</span></span><br><span class="line"><span class="comment">// &amp;&amp;---逻辑与--并且</span></span><br><span class="line"><span class="comment">// ||---逻辑或---或者</span></span><br><span class="line"><span class="comment">// !---逻辑非---取反--取非</span></span><br><span class="line"><span class="comment">// 逻辑运算表达式:由逻辑运算符连接起来的表达式</span></span><br><span class="line"><span class="comment">// 表达式1 &amp;&amp; 表达式2</span></span><br><span class="line"><span class="comment">// 如果有一个为false,整个的结果就是false</span></span><br><span class="line"><span class="comment">// 表达式1 || 表达式2</span></span><br><span class="line"><span class="comment">// 如果有一个为true,整个的结果为true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// !表达式1 取反</span></span><br><span class="line"><span class="comment">// 表达式1的结果是true,整个结果为false</span></span><br><span class="line"><span class="comment">// 表达式1的结果是false,整个结果为true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 赋值运算符:  =</span></span><br><span class="line"><span class="keyword">var</span> num = <span class="number">12</span></span><br></pre></td></tr></table></figure>

<h3 id="一元运算符"><a href="#一元运算符" class="headerlink" title="一元运算符"></a>一元运算符</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 基础  ++与--</span></span><br><span class="line"><span class="keyword">var</span> num = <span class="number">10</span></span><br><span class="line">num++ <span class="comment">// 相当于num = num + 1 输出 11</span></span><br><span class="line">num-- <span class="comment">// 相当于num = num - 1 输出 9</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 进阶</span></span><br><span class="line"><span class="keyword">var</span> num = <span class="number">10</span></span><br><span class="line"><span class="keyword">var</span> sum = num++ + <span class="number">10</span> <span class="comment">// sum = 20</span></span><br><span class="line"><span class="comment">// 如果++在后面：如上： num++ + 10参与运算</span></span><br><span class="line"><span class="comment">// 先运算 再加加</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> sum1 = ++num + <span class="number">10</span> <span class="comment">// sum1 = 21</span></span><br><span class="line"><span class="comment">// 如果++在前面 如上： ++num + 10</span></span><br><span class="line"><span class="comment">// 先加加 再运算加10</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript简介</title>
    <url>/2019/12/31/js%E7%AE%80%E4%BB%8B/</url>
    <content><![CDATA[<h4 id="JavaScript-–-gt-简称-js"><a href="#JavaScript-–-gt-简称-js" class="headerlink" title="JavaScript –&gt; 简称 js"></a>JavaScript –&gt; 简称 js</h4><blockquote>
<p>JavaScript 历史</p>
</blockquote>
<p>​ 1995 年，网景公司希望能在静态 HTML 页面上添加一些动态效果, 让 Brendan Eich 设计出了 JavaScript 语言(用时 2 周)</p>
<blockquote>
<p>JavaScript 分为三个部分:</p>
</blockquote>
<ul>
<li>ECMAScript 标准—-js 的基本语法</li>
<li>DOM—Document Object Model 文档对象模型</li>
<li>BOM—Browser Object Model 浏览器对象模型</li>
</ul>
<blockquote>
<p>JavaScript 是什么?</p>
</blockquote>
<ul>
<li>是一门脚本语言</li>
<li>是一门解释性语言</li>
<li>是一门弱类型的语言</li>
<li>是一门动态类型的语言</li>
<li>是一门基于对象的语言</li>
</ul>
<blockquote>
<p>JavaScript 代码写在哪里</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">第一种:写在html文件中--&gt;使用script标签包裹代码</span><br><span class="line">&lt;script&gt;</span><br><span class="line">	alert(<span class="string">'这对script标签中的就是js代码)</span></span><br><span class="line"><span class="string">&lt;/script&gt;</span></span><br><span class="line"><span class="string">第二种:可以单独写在js文件中--&gt;js文件中不需要使用&lt;script&gt;标签</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p><code>&lt;script&gt;</code>标签的属性:</p>
</blockquote>
<ul>
<li>src 表示要引入的外部文件</li>
<li>type 表示脚本语言的类型 text/javascript,默认值就是它.</li>
<li>language 已废弃。原来用于代码使用的脚本语言。由于大多数浏览器忽略它，所以不要用了。</li>
<li>defer：可选。(等页面加载完成后,才执行 js)表示脚本可以延迟到文档完全被解析和显示之后再执行。由于大多数浏览器不支持，故很少用。</li>
<li>charset：可选。表示通过 src 属性指定的字符集。由于大多数浏览器忽略它，所以很少有人用它。</li>
<li>async:可选,能简单实现 js 的异步加载.</li>
</ul>
<blockquote>
<p>注意事项</p>
</blockquote>
<ul>
<li><code>&lt;script&gt;</code>标签尽量放在<code>&lt;body&gt;</code>标签内,放在结束的<code>&lt;/body&gt;</code>标签前</li>
<li>一个<code>&lt;script&gt;</code>标签如果用于引入外部 js 文件,就不要在标签内写 script 代码</li>
<li>html 文件中可以同时存在多对<code>&lt;script&gt;</code>标签,浏览器会依次解析执行</li>
</ul>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>实现一个简单的 Form 表单组件</title>
    <url>/2019/12/30/myForm/</url>
    <content><![CDATA[<p>&emsp;&emsp;本文主要通过实现一个简单的 Form 组件来学习 Vue 中相关知识点.</p>
<h3 id="相关知识点"><a href="#相关知识点" class="headerlink" title="相关知识点"></a>相关知识点</h3><ul>
<li>v-model 指令的实质</li>
<li>父子组件定义属性传值 props $emit</li>
<li>子孙组件传值 provide inject</li>
<li>slot 插槽</li>
<li>在生命周期中监听自定义事件</li>
</ul>
<h3 id="需求分析"><a href="#需求分析" class="headerlink" title="需求分析"></a>需求分析</h3><ul>
<li>数据双向绑定</li>
<li>单个规则校验</li>
<li>label</li>
<li>error 错误提示</li>
<li>数据获取</li>
<li>数据传递</li>
<li>全局校验</li>
</ul>
<h3 id="组件拆分-单一性"><a href="#组件拆分-单一性" class="headerlink" title="组件拆分(单一性)"></a>组件拆分(单一性)</h3><ul>
<li>Input 组件</li>
<li>FormItem 组件</li>
<li>Form 组件</li>
</ul>
<h3 id="组件功能划分"><a href="#组件功能划分" class="headerlink" title="组件功能划分"></a>组件功能划分</h3><hr>
<blockquote>
<p>Input 组件</p>
</blockquote>
<p>数据双向绑定<br>触发规则校验</p>
<hr>
<blockquote>
<p>FormItme 组件</p>
</blockquote>
<p>label<br>prop<br>error</p>
<hr>
<blockquote>
<p>Form 组件</p>
</blockquote>
<p>数据模型持有<br>校验规则持有<br>数据传递<br>全局校验</p>
<hr>
<h3 id="功能实现"><a href="#功能实现" class="headerlink" title="功能实现"></a>功能实现</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Input 组件</span></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;input type=<span class="string">"text"</span> :value=<span class="string">"value"</span> @input=<span class="string">"onInput"</span> /&gt;</span><br><span class="line">  &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 职能</span></span><br><span class="line"><span class="comment"> * 1.双向绑定</span></span><br><span class="line"><span class="comment"> * 2.触发校验</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  name: <span class="string">'KInput'</span>,</span><br><span class="line">  props: &#123;</span><br><span class="line">    value: &#123;</span><br><span class="line">      type: <span class="built_in">String</span>,</span><br><span class="line">      <span class="keyword">default</span>: <span class="string">''</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    onInput(e) &#123;</span><br><span class="line">      <span class="comment">// v-model 监听 input</span></span><br><span class="line">      <span class="keyword">this</span>.$emit(<span class="string">'input'</span>, e.target.value)</span><br><span class="line">      <span class="comment">// 触发校验</span></span><br><span class="line">      <span class="keyword">this</span>.$parent.$emit(<span class="string">'validate'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// FormItem 组件</span></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;label v-<span class="keyword">if</span>=<span class="string">"label"</span>&gt;&#123;&#123; label &#125;&#125;&lt;<span class="regexp">/label&gt;</span></span><br><span class="line"><span class="regexp">    &lt;slot /</span>&gt;</span><br><span class="line">    &lt;span v-show=<span class="string">"error"</span>&gt;&#123;&#123; error &#125;&#125;&lt;<span class="regexp">/span&gt;</span></span><br><span class="line"><span class="regexp">  &lt;/</span>div&gt;</span><br><span class="line">&lt;<span class="regexp">/template&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;script&gt;</span></span><br><span class="line"><span class="regexp">/</span>**</span><br><span class="line"> * 职能</span><br><span class="line"> * <span class="number">1.</span>校验</span><br><span class="line"> * <span class="number">2.</span>label</span><br><span class="line"> * <span class="number">3.</span>error</span><br><span class="line"> *<span class="regexp">/</span></span><br><span class="line"><span class="regexp">import Schema from 'async-validator'</span></span><br><span class="line"><span class="regexp">export default &#123;</span></span><br><span class="line"><span class="regexp">  inject: ['form'],</span></span><br><span class="line"><span class="regexp">  props: &#123;</span></span><br><span class="line"><span class="regexp">    label: &#123;</span></span><br><span class="line"><span class="regexp">      type: String,</span></span><br><span class="line"><span class="regexp">      default: ''</span></span><br><span class="line"><span class="regexp">    &#125;,</span></span><br><span class="line"><span class="regexp">    prop: &#123;</span></span><br><span class="line"><span class="regexp">      type: String,</span></span><br><span class="line"><span class="regexp">      default: ''</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">  &#125;,</span></span><br><span class="line"><span class="regexp">  data() &#123;</span></span><br><span class="line"><span class="regexp">    return &#123;</span></span><br><span class="line"><span class="regexp">      error: ''</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">  &#125;,</span></span><br><span class="line"><span class="regexp">  mounted() &#123;</span></span><br><span class="line"><span class="regexp">    this.$on('validate', () =&gt; &#123;</span></span><br><span class="line"><span class="regexp">      this.validate()</span></span><br><span class="line"><span class="regexp">    &#125;)</span></span><br><span class="line"><span class="regexp">  &#125;,</span></span><br><span class="line"><span class="regexp">  methods: &#123;</span></span><br><span class="line"><span class="regexp">    validate() &#123;</span></span><br><span class="line"><span class="regexp">      /</span>**</span><br><span class="line">       * 引入 sync-validate 插件</span><br><span class="line">       * 获取校验规则与校验值</span><br><span class="line">       *<span class="regexp">/</span></span><br><span class="line"><span class="regexp">      const value = this.form.model[this.prop]</span></span><br><span class="line"><span class="regexp">      const rule = this.form.rules[this.prop]</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">      const schema = new Schema(&#123; [this.prop]: rule &#125;)</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">      return schema.validate(</span></span><br><span class="line"><span class="regexp">        &#123; [this.prop]: value.trim() &#125;,</span></span><br><span class="line"><span class="regexp">        errors =&gt; (this.error = errors ? errors[0].message : '')</span></span><br><span class="line"><span class="regexp">      )</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp">&lt;/</span>script&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Form 组件</span></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;slot /&gt;</span><br><span class="line">  &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 职能</span></span><br><span class="line"><span class="comment"> * 1.数据持有丶传递</span></span><br><span class="line"><span class="comment"> * 2.全局校验</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  props: &#123;</span><br><span class="line">    model: &#123;</span><br><span class="line">      type: <span class="built_in">Object</span></span><br><span class="line">    &#125;,</span><br><span class="line">    rules: &#123;</span><br><span class="line">      type: <span class="built_in">Object</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  provide() &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      form: <span class="keyword">this</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    validate(cb) &#123;</span><br><span class="line">      <span class="comment">/**</span></span><br><span class="line"><span class="comment">       * 全局校验</span></span><br><span class="line"><span class="comment">       * 获取所有子组件</span></span><br><span class="line"><span class="comment">       * 找到带有prop验证的</span></span><br><span class="line"><span class="comment">       * 调用子组件自身的校验方法</span></span><br><span class="line"><span class="comment">       */</span></span><br><span class="line">      <span class="keyword">const</span> tasks = <span class="keyword">this</span>.$children</span><br><span class="line">        .filter(<span class="function"><span class="params">item</span> =&gt;</span> item.prop)</span><br><span class="line">        .map(<span class="function"><span class="params">item</span> =&gt;</span> item.validate())</span><br><span class="line"></span><br><span class="line">      <span class="built_in">Promise</span>.all(tasks)</span><br><span class="line">        .then(<span class="function"><span class="params">()</span> =&gt;</span> cb(<span class="literal">true</span>))</span><br><span class="line">        .catch(<span class="function"><span class="params">()</span> =&gt;</span> cb(<span class="literal">false</span>))</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 测试</span></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;KFrom ref=<span class="string">"form"</span> :model=<span class="string">"model"</span> :rules=<span class="string">"rules"</span>&gt;</span><br><span class="line">      &lt;KFormitem lable=<span class="string">"用户名"</span> prop=<span class="string">"uname"</span>&gt;</span><br><span class="line">        &lt;KInput v-model=<span class="string">"model.uname"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">KInput</span>&gt;</span></span></span><br><span class="line">      &lt;<span class="regexp">/KFormitem&gt;</span></span><br><span class="line"><span class="regexp">      &lt;KFormitem lable="密码" prop="pwd"&gt;</span></span><br><span class="line"><span class="regexp">        &lt;KInput v-model="model.pwd"&gt;&lt;/</span>KInput&gt;</span><br><span class="line">      &lt;<span class="regexp">/KFormitem&gt;</span></span><br><span class="line"><span class="regexp">      &lt;KFormitem&gt;</span></span><br><span class="line"><span class="regexp">        &lt;button @click="submit"&gt;校验&lt;/</span>button&gt;</span><br><span class="line">      &lt;<span class="regexp">/KFormitem&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>KFrom&gt;</span><br><span class="line">  &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">import</span> KFrom <span class="keyword">from</span> <span class="string">'./KForm'</span></span><br><span class="line"><span class="keyword">import</span> KFormitem <span class="keyword">from</span> <span class="string">'./KFormitem'</span></span><br><span class="line"><span class="keyword">import</span> KInput <span class="keyword">from</span> <span class="string">'./KInput'</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  components: &#123; KFrom, KFormitem, KInput &#125;,</span><br><span class="line">  data() &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      model: &#123;</span><br><span class="line">        uname: <span class="string">''</span>,</span><br><span class="line">        pwd: <span class="string">''</span></span><br><span class="line">      &#125;,</span><br><span class="line">      rules: &#123;</span><br><span class="line">        uname: [&#123; <span class="attr">required</span>: <span class="literal">true</span>, <span class="attr">message</span>: <span class="string">'用户名不能为空'</span> &#125;],</span><br><span class="line">        pwd: [&#123; <span class="attr">required</span>: <span class="literal">true</span>, <span class="attr">message</span>: <span class="string">'密码不能为空'</span> &#125;]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    submit() &#123;</span><br><span class="line">      <span class="keyword">this</span>.$refs.form.validate(<span class="function"><span class="params">isValidate</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (isValidate) &#123;</span><br><span class="line">          alert(<span class="string">'校验通过'</span>)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          alert(<span class="string">'校验失败'</span>)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo + Next + GitHub 搭建博客</title>
    <url>/2019/12/26/hello-blog/</url>
    <content><![CDATA[<p>&emsp;&emsp;秃头一族怎么能没有自己的 Blog 呢? 本想着自己买服务器与域名,使用 Node React 纯手撸 ,奈何钱包与时间它不允许, 所以就有了本站与这篇文章了.</p>
<blockquote>
<p>相关链接</p>
</blockquote>
<p><a href="https://hexo.io/" target="_blank" rel="noopener">Hexo 文档</a><br><a href="https://theme-next.iissnan.com/" target="_blank" rel="noopener">NexT 文档</a><br><a href="https://cuiqingcai.com/7625.html" target="_blank" rel="noopener">参考大神博客</a></p>
<blockquote>
<p>一.全局安装 Hexo</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure>

<blockquote>
<p>二.创建博客项目</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 使用终端进入准备存放博客项目的目录 输入以下命令</span></span><br><span class="line">hexo init hexo-blog <span class="comment"># hexo-blog 自己取名即可</span></span><br><span class="line"><span class="built_in">cd</span> hexo-blog</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure>

<blockquote>
<p>三.本地预览博客</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo server <span class="comment"># 使用浏览器开大 http://localhost:4000 即可</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>四.打包部署</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo d -g</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Blog</tag>
        <tag>Hexo</tag>
        <tag>GitHub</tag>
      </tags>
  </entry>
  <entry>
    <title>HTML meta标签详解</title>
    <url>/2019/12/26/meta%E8%AF%A6%E8%A7%A3/</url>
    <content><![CDATA[<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;  H5标准声明，使用 HTML5 doctype，不区分大小写</span><br><span class="line">&lt;head lang=”en”&gt; 标准的 lang 属性写法</span><br><span class="line">&lt;meta charset=’utf<span class="number">-8</span>′&gt;    声明文档使用的字符编码</span><br><span class="line">&lt;meta http-equiv=”X-UA-Compatible” content=”IE=edge,chrome=<span class="number">1</span>″/&gt;   优先使用 IE 最新版本和 Chrome</span><br><span class="line">&lt;meta name=”description” content=”不超过<span class="number">150</span>个字符”/&gt;       页面描述</span><br><span class="line">&lt;meta name=”keywords” content=””/&gt;      页面关键词</span><br><span class="line">&lt;meta name=”author” content=”name, email@gmail.com”/&gt;    网页作者</span><br><span class="line">&lt;meta name=”robots” content=”index,follow”/&gt;      搜索引擎抓取</span><br><span class="line">&lt;meta name=”viewport” content=”initial-scale=<span class="number">1</span>, maximum-scale=<span class="number">3</span>, minimum-scale=<span class="number">1</span>, user-scalable=no”&gt; 为移动设备添加 viewport</span><br><span class="line">&lt;meta name=”apple-mobile-web-app-title” content=”标题”&gt; iOS 设备 begin</span><br><span class="line">&lt;meta name=”apple-mobile-web-app-capable” content=”yes”/&gt;  添加到主屏后的标题（iOS <span class="number">6</span> 新增）</span><br><span class="line">是否启用 WebApp 全屏模式，删除苹果默认的工具栏和菜单栏</span><br><span class="line">&lt;meta name=”apple-itunes-app” content=”app-id=myAppStoreID, affiliate-data=myAffiliateData, app-argument=myURL”&gt;</span><br><span class="line">添加智能 App 广告条 Smart App Banner（iOS <span class="number">6</span>+ Safari）</span><br><span class="line">&lt;meta name=”apple-mobile-web-app-status-bar-style” content=”black”/&gt;</span><br><span class="line">&lt;meta name=”format-detection” content=”telphone=no, email=no”/&gt;  设置苹果工具栏颜色</span><br><span class="line">&lt;meta name=”renderer” content=”webkit”&gt;  启用<span class="number">360</span>浏览器的极速模式(webkit)</span><br><span class="line">&lt;meta http-equiv=”X-UA-Compatible” content=”IE=edge”&gt;     避免IE使用兼容模式</span><br><span class="line">&lt;meta http-equiv=”Cache-Control” content=”no-siteapp” /&gt;    不让百度转码</span><br><span class="line">&lt;meta name=”HandheldFriendly” content=”<span class="literal">true</span>”&gt;     针对手持设备优化，主要是针对一些老的不识别viewport的浏览器，比如黑莓</span><br><span class="line">&lt;meta name=”MobileOptimized” content=”<span class="number">320</span>″&gt;   微软的老式浏览器</span><br><span class="line">&lt;meta name=”screen-orientation” content=”portrait”&gt;   uc强制竖屏</span><br><span class="line">&lt;meta name=”x5-orientation” content=”portrait”&gt;    QQ强制竖屏</span><br><span class="line">&lt;meta name=”full-screen” content=”yes”&gt;              UC强制全屏</span><br><span class="line">&lt;meta name=”x5-fullscreen” content=”<span class="literal">true</span>”&gt;       QQ强制全屏</span><br><span class="line">&lt;meta name=”browsermode” content=”application”&gt;   UC应用模式</span><br><span class="line">&lt;meta name=”x5-page-mode” content=”app”&gt;    QQ应用模式</span><br><span class="line">&lt;meta name=”msapplication-tap-highlight” content=”no”&gt;    windows phone 点击无高光</span><br><span class="line">设置页面不缓存</span><br><span class="line">&lt;meta http-equiv=”pragma” content=”no-cache”&gt;</span><br><span class="line">&lt;meta http-equiv=”cache-control” content=”no-cache”&gt;</span><br><span class="line">&lt;meta http-equiv=”expires” content=”<span class="number">0</span>″&gt;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>HTML</category>
      </categories>
  </entry>
</search>
